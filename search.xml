<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法入门-贪心算法</title>
      <link href="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/"/>
      <url>/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="贪心算法本质"><a href="#贪心算法本质" class="headerlink" title="贪心算法本质"></a>贪心算法本质</h2><blockquote><p>一个贪心算法总是做出当前最好的选择，也就是说，它期望通过<strong>局部最优选择</strong>从而得到全局最优的解决方案。</p></blockquote><p>贪心算法在解决问题的策略上“<strong>目光短浅</strong>”，只根据当前已有的信息就做出选择，而且一旦做出了选择，不管将来有什么结果，这个选择都不会改变。换言之，贪心算法并不是从整体最优考虑，它所做出的选择只是在<strong>某种意义上的局部最优</strong>。贪心算法能得到许多问题的<strong>整体最优解或整体最优解的近似解</strong>。</p><p>所谓贪心选择性质是指原问题的整体最优解可以通过一系列局部最优的选择得到。是运用贪心策略解决的问题在程序的运行过程中<strong>无回溯</strong>过程。根据贪心策略，一步一步地得到局部最优解。最终根据贪心策略，一步一步地得到局部最优解。</p><blockquote><p>冒泡排序就使用了贪心算法，它的贪心策略就是每一次从剩下的序列中选一个最大的数，把这些选出来的数放在一起，就得到了从大到小的排序结果。</p></blockquote><h2 id="最优装载问题"><a href="#最优装载问题" class="headerlink" title="最优装载问题"></a>最优装载问题</h2><p>该问题要求装载的物品的数量尽可能多，而船的容量是固定的，那么优先把重量小的物品放进去，在容量固定的情况下，装的物品最多。</p><p>采用<strong>重量最轻者先装</strong>的贪心选择策略，从局部最优达到全局最优，从而产生最优装载问题的最优解。</p><h3 id="算法设计："><a href="#算法设计：" class="headerlink" title="算法设计："></a>算法设计：</h3><ol><li>当载重量为定值c时，每件古董越小时，可装载的古董数量就越大。只要依次选择最小重量古董，直到不能再装为止。</li><li>把n个古董的重量从小到大排序，然后根据贪心策略尽可能多地选出古董，直到不能继续装为止，此时达到最优。</li></ol><p>每个古董的重量如下表所示，海盗船的载重量c为30，那么在不打碎古董又不超过载重的情况下，要装入最多的古董。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901162702223.png" alt="image-20220901162702223"></p><ol><li><p>因为贪心策略是每次选择重量最小的古董装入海盗船，因此可以按照古董重量非递减排序，排序后如下表所示。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901162839158.png" alt="image-20220901162839158"></p></li><li><p>按照贪心策略，每次选择重量最小的古董放入（tmp 代表古董的重量，ans 代表已装裁的古董个数）。</p><p>i&#x3D;0，选择排序后的第 1 个，装入重量 tmp&#x3D;2，不超过载重量 30，ans &#x3D;1。<br>i&#x3D;1，选择排序后的第 2 个，装入重量 tmp&#x3D;2+3&#x3D;5，不超过载重量 30，ans &#x3D;2。<br>i&#x3D;2，选择排序后的第 3 个，装入重量 tmp&#x3D;5+4&#x3D;9，不超过载重量 30，ans &#x3D;3。<br>i&#x3D;3，选择排序后的第 4 个，装入重量 tmp&#x3D;9+5&#x3D;14，不超过载重量 30，ans &#x3D;4。<br>i&#x3D;4，选择排序后的第 5 个，装入重量 tmp&#x3D;14+7&#x3D;21，不超过载重量 30，ans &#x3D;5。<br>i&#x3D;5，选择排序后的第 6 个，装入重量 tmp&#x3D;21+10&#x3D;31，超过载重量 30，算法结束。<br>即放入古董的个数为 ans&#x3D;5 个。</p></li></ol><h3 id="运行代码："><a href="#运行代码：" class="headerlink" title="运行代码："></a>运行代码：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//program 2-1</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1000005</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">double</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//古董的重量数组</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> c<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>c<span class="token operator">>></span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//输入每个物品重量</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 可以利用 C++中的排序函数 sort（见附录 B），对古董的重量进行从小到大（非递减）排序。要使用此函数需引入头文件：</span>        <span class="token comment">// #include &lt;algorithm></span>        <span class="token comment">// 语法描述为：</span>        <span class="token comment">// sort(begin, end)//参数 begin 和 end 表示一个范围，分别为待排序数组的首地址和尾地址</span>        <span class="token comment">// sort 函数默认为升序</span>        <span class="token comment">// 在本例中只需要调用 sort 函数对古董的重量进行从小到大排序：</span>        <span class="token function">sort</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>w<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//按古董重量升序排序</span>        <span class="token keyword">double</span> tmp<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// tmp为已装载到船上的古董重量，ans为已装载的古董个数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            tmp<span class="token operator">+=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">&lt;=</span>c<span class="token punctuation">)</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输入</span><span class="token comment">/*请输入载重量 c 及古董个数 n：30 8                        //载重量 c 及古董的个数 n请输入每个古董的重量，用空格分开：4 10 7 11 3 5 14 2         //每个古董的重量，用空格隔开*/</span><span class="token comment">//输出</span><span class="token comment">//能装入的古董最大数量为 Ans=5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法解析："><a href="#算法解析：" class="headerlink" title="算法解析："></a>算法解析：</h3><ol><li>算法复杂度分析：<ul><li>时间复杂度：首先需要按古董重量排序，调用 sort 函数，其平均时间复杂度为 O(nlogn)，输入和贪心策略求解的两个 for 语句时间复杂度均为 O(n)，因此时间复杂度为 <strong>O(n + nlog(n))</strong></li><li>空间复杂度：程序中变量 tmp、ans 等占用了一些辅助空间，这些辅助空间都是常数阶的，因此空间复杂度为 <strong>O(1)</strong></li></ul></li><li>优化拓展：<ul><li>为什么在没有装满的情况下，仍然是最优解？因为此算法要求装入最多数量，和价值无关，所以从重量小的开始装才能装入最多的数量。</li><li>如果想知道装入哪些古董，应当如何实现？</li></ul></li></ol><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p>假设山洞中有 n 种宝物，每种宝物有一定重量 w 和相应的价值 v，毛驴运载能力有限，只能运走 m 重量的宝物，一种宝物只能拿一样，宝物可以分割。那么怎么才能使毛驴运走宝物的价值最大呢？</p><p>答案是选择<strong>性价比</strong>（<strong>价值&#x2F;重量</strong>）最高的宝物，如果可以达到运载重量m，那么一定能得到价值最大，即每次从剩下的宝物中选择性价比最高的宝物。</p><h3 id="算法设计：-1"><a href="#算法设计：-1" class="headerlink" title="算法设计："></a>算法设计：</h3><ol><li>将 n 种宝物的重量和价值存储在结构体 three（包含重量、价值、性价比 3 个成员）中，同时求出每种宝物的性价比也存储在对应的结构体 three 中，将其按照性价比从高到低排序。采用 sum 来存储毛驴能够运走的最大价值，初始化为 0。</li><li>根据贪心策略，按照性价比从大到小选取宝物，直到达到毛驴的运载能力。每次选择性价比高的物品，判断是否小于 m（毛驴运载能力），如果小于 m，则放入，sum（已放入物品的价值）加上当前宝物的价值，m 减去放入宝物的重量；如果不小于 m，**则取该宝物的一部分 m * p[i]**，m&#x3D;0，程序结束。m 减少到 0，则 sum 得到最大值。</li></ol><p>有一批宝物的价值，价值和重量如表所示，毛驴的运载能力m&#x3D;30。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901172836572.png" alt="image-20220901172836572"></p><ol><li><p>按照性价比降序排序，排序后如下表所示：</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901173212678.png" alt="image-20220901173212678"></p></li><li><p>每次选择性价比高的宝物放入：</p><p>第 1 次选择宝物 2，剩余容量 30−2&#x3D;28，目前装入最大价值为 8。<br>第 2 次选择宝物 10，剩余容量 28−5&#x3D;23，目前装入最大价值为 8+15&#x3D;23。<br>第 3 次选择宝物 6，剩余容量 23−8&#x3D;15，目前装入最大价值为 23+20&#x3D;43。<br>第 4 次选择宝物 3，剩余容量 15−9&#x3D;6，目前装入最大价值为 43+18&#x3D;61。</p><p>第 5 次选择宝物 5，剩余容量 6−5&#x3D;1，目前装入最大价值为 61+8&#x3D;69。<br>第 6 次选择宝物 8，发现上次处理完时剩余容量为 1，而 8 号宝物重量为 4，无法全部放入，那么可以采用部分装入的形式，装入 1 个重量单位，因为 8 号宝物的单位重量价值为1.5，因此放入价值 1×1.5&#x3D;1.5，你也可以认为装入了 8 号宝物的 1&#x2F;4，目前装入最大价值为69+1.5&#x3D;70.5，剩余容量为 0。</p></li><li><p>构造最优解：</p><p>把这些放入的宝物序号组合在一起，就得到了最优解（2，10，6，3，5，8），其中最后一个宝物为部分装入（装了 8 号财宝的 1&#x2F;4），能够装入宝物的最大价值为 70.5。</p></li></ol><h3 id="运行代码：-1"><a href="#运行代码：-1" class="headerlink" title="运行代码："></a>运行代码：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//program 2-2</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">1000005</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">three</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> w<span class="token punctuation">;</span><span class="token comment">//每个宝物的重量</span>    <span class="token keyword">double</span> v<span class="token punctuation">;</span><span class="token comment">//每个宝物的价值</span>    <span class="token keyword">double</span> p<span class="token punctuation">;</span><span class="token comment">//性价比</span><span class="token punctuation">&#125;</span>s<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//如果不使用自定义比较函数，那么sort函数排序时不知道按哪一项的值排序，因此采用自定义比较函数的办法实现宝物性价比的降序排序。</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>three a<span class="token punctuation">,</span>three b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>p<span class="token operator">></span>b<span class="token punctuation">.</span>p<span class="token punctuation">;</span><span class="token comment">//根据宝物的单位价值从大到小排序</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//n 表示有n个宝物</span>    <span class="token keyword">double</span> m <span class="token punctuation">;</span><span class="token comment">//m 表示毛驴的承载能力</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入宝物数量n及毛驴的承载能力m ："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入每个宝物的重量和价值，用空格分开： "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">>></span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">/</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token comment">//每个宝物单位价值</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>s<span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 前两个参数分别为待排序数组的首地址和尾地址，最后一个参数compare表示比较的类型</span>    <span class="token keyword">double</span> sum<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span><span class="token comment">// sum 表示贪心记录运走宝物的价值之和</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//按照排好的顺序贪心</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> m<span class="token operator">></span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token punctuation">)</span><span class="token comment">//如果宝物的重量小于毛驴剩下的承载能力</span>        <span class="token punctuation">&#123;</span>            m<span class="token operator">-=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>            sum<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token comment">//如果宝物的重量大于毛驴剩下的承载能力</span>        <span class="token punctuation">&#123;</span>            sum<span class="token operator">+=</span>m<span class="token operator">*</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">;</span><span class="token comment">//部分装入，m为剩余的装载能力，即还能装多少货物，s[i].p为单位重量价值，二者相乘为总价值。</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"装入宝物的最大价值Maximum value="</span><span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出装入宝物的最大价值</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//輸入</span><span class="token comment">/* 6 19 //宝物数量，驴子的承载重量2 8 //第 1 个宝物的重量和价值6 1 //第 2 个宝物的重量和价值7 94 310 23 4*/</span><span class="token comment">//输出</span><span class="token comment">//Maxinum value=24.6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法解析：-1"><a href="#算法解析：-1" class="headerlink" title="算法解析："></a>算法解析：</h3><ol><li><p>算法复杂度分析：</p><ul><li>时间复杂度：该算法的时间主要耗费在将宝物按照性价比排序上，采用的是快速排序，算法时间复杂度为 <strong>O(nlogn)</strong></li><li>空间复杂度：空间主要耗费在存储宝物的性价比，空间复杂度为 <strong>O(n)</strong></li></ul><p>贪心策略是在每次取剩下物品里面性价比最高的物品，这样可以使得在相同重量条件下比选其他物品所得的价值更大，因此采用贪心策略能得到最优解。</p></li><li><p>优化拓展：</p><ul><li><p>如果宝物不能分割，贪心算法是否能得到最优解？</p><p>不一定。有可能出现剩余容量，没有装满的情况。这种情况下可能存在刚好达到运载能力的选择方案，因此在宝物不可分割、没法装满的情况下，贪心算法并不能得到最优解，仅仅是最优解的近似解。</p></li></ul></li></ol><h2 id="会议安排问题"><a href="#会议安排问题" class="headerlink" title="会议安排问题"></a>会议安排问题</h2><p>会议安排的目的是能在<strong>有限的时间内召开更多的会议</strong>（任何两个会议不能同时进行）。在会议安排中，每个会议 i 都有起始时间 bi 和结束时间 e i，且 bi&lt;ei，即一个会议进行的时间为半开区间[bi，ei）。如果[b i，ei）与[bj，ej）均在“有限的时间内”，且不相交，则称会议 i 与会议 j 相容的。也就是说，当 bi≥ej 或 bj≥ei 时，会议 i与会议 j 相容。会议安排问题要求在<strong>所给的会议集合中选出最大的相容活动子集</strong>，即尽可能在有限的时间内召开更多的会议。</p><p>尝试贪心策略：如果选择最早开始时间的会议，则如果会议持续时间很长，例如 8 点开始，却要持续 12 个小时，这样一天就只能安排一个会议；如果选择持续时间最短，则可能开始时间很晚，例如 19 点开始，20 点结束，这样也只能安排一个会议，所以我们最好选择那些开始时间要早，而且持续时间短的会议，即最早开始时间+持续时间最短，就是最早结束时间。</p><blockquote><p>每次从剩下的会议中选择<strong>具有最早结束时间且与已安排的会议相容</strong>的会议安排。</p></blockquote><h3 id="算法设计：-2"><a href="#算法设计：-2" class="headerlink" title="算法设计："></a>算法设计：</h3><ol><li>初始化：将 n 个会议的开始时间、结束时间存放在结构体数组中（想一想，为什么不用两个一维数组分别存储？），如果需要知道选中了哪些会议，还需要在结构体中增加会议编号，然后按结束时间从小到大排序（非递减），结束时间相等时，按开始时间从大到小排序（非递增）；</li><li>根据贪心策略就是选择第一个具有最早结束时间的会议，用 last 记录刚选中会议的结束时间；</li><li>选择第一个会议之后，依次从剩下未安排的会议中选择，如果会议 i <strong>开始时间大于等于最后一个选中的会议的结束时间</strong> last，那么会议 i 与已选中的会议相容，可以安排，更新 last 为刚选中会议的结束时间；否则，舍弃会议 i，检查下一个会议是否可以安排。</li></ol><p>原始的会议时间表：</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901215008673.png" alt="image-20220901215008673"></p><p>排序后的会议时间表：</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901215037996.png" alt="image-20220901215037996"></p><p>贪心选择过程：</p><ul><li><p>首先选择排序后的第一个会议即最早结束的会议（编号为 2），用 last 记录最后一个被选中会议的结束时间，last&#x3D;4。</p></li><li><p>检查余下的会议，找到第一个开始时间大于等于 last（last&#x3D;4）的会议，子问题转化为从该会议开始，余下的所有会议。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901215159196.png" alt="image-20220901215159196"></p><p>从子问题中，选择第一个会议即最早结束的会议（编号为 3），更新 last 为刚选中会议的结束时间 last&#x3D;7。</p></li><li><p>检查余下的会议，找到第一个开始时间大于等于 last（last&#x3D;7）的会议，子问题转化为从该会议开始，余下的所有会议。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901215514120.png" alt="image-20220901215514120"></p><p>从子问题中，选择第一个会议即最早结束的会议（编号为 7），更新 last 为刚选中会议的结束时间 last&#x3D;11。</p></li><li><p>检查余下的会议，找到第一个开始时间大于等于 last（last&#x3D;11）的会议，子问题转化为从该会议开始，余下的所有会议。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901215546493.png" alt="image-20220901215546493"></p><p>从子问题中，选择第一个会议即最早结束的会议（编号为 10），更新 last 为刚选中会议的结束时间 last&#x3D;14；所有会议检查完毕，算法结束。</p></li><li><p>从贪心选择的结果，可以看出，被选中的会议编号为{2，3，7，10}，可以安排的会议数量最多为 4。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901215640659.png" alt="image-20220901215640659"></p></li></ul><h3 id="运行代码：-2"><a href="#运行代码：-2" class="headerlink" title="运行代码："></a>运行代码：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//program 2-3</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Meet</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> beg<span class="token punctuation">;</span>   <span class="token comment">//会议的开始时间</span>    <span class="token keyword">int</span> end<span class="token punctuation">;</span>   <span class="token comment">//会议的结束时间</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>   <span class="token comment">//记录会议的编号</span><span class="token punctuation">&#125;</span>meet<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//会议的最大个数为1000</span><span class="token keyword">class</span> <span class="token class-name">setMeet</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>ans<span class="token punctuation">;</span> <span class="token comment">// n:会议总数 ans: 最大的安排会议总数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//读入数据</span><span class="token keyword">void</span> setMeet<span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> s<span class="token punctuation">,</span>e<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"输入会议总数："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"输入会议的开始时间和结束时间，以空格分开:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>s<span class="token operator">>></span>e<span class="token punctuation">;</span>        meet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>beg<span class="token operator">=</span>s<span class="token punctuation">;</span>        meet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token operator">=</span>e<span class="token punctuation">;</span>        meet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Meet x<span class="token punctuation">,</span>Meet y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>end <span class="token operator">==</span> y<span class="token punctuation">.</span>end<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span>beg <span class="token operator">></span> y<span class="token punctuation">.</span>beg<span class="token punctuation">;</span><span class="token comment">//结束时间相等时，按开始时间从大到小排序</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>end <span class="token operator">&lt;</span> y<span class="token punctuation">.</span>end<span class="token punctuation">;</span><span class="token comment">//按结束时间从小到大排序</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> setMeet<span class="token double-colon punctuation">::</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>meet<span class="token punctuation">,</span>meet<span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//对会议按结束时间排序</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"排完序的会议时间如下:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"会议编号："</span><span class="token operator">&lt;&lt;</span><span class="token string">"  开始时间 "</span><span class="token operator">&lt;&lt;</span><span class="token string">" 结束时间"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      cout<span class="token operator">&lt;&lt;</span> <span class="token string">"   "</span> <span class="token operator">&lt;&lt;</span> meet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">&lt;&lt;</span><span class="token string">"\t\t"</span><span class="token operator">&lt;&lt;</span>meet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>beg <span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token operator">&lt;&lt;</span> meet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"-------------------------------------------------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"选择的会议的过程:"</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"  选择第"</span><span class="token operator">&lt;&lt;</span> meet<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">&lt;&lt;</span><span class="token string">"个会议"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//选中了第一个会议</span>    ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> meet<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">;</span>  <span class="token comment">//记录刚刚被选中会议的结束时间</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>meet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>beg<span class="token operator">>=</span>last<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//如果会议i开始时间大于等于最后一个选中的会议的结束时间</span>           ans<span class="token operator">++</span><span class="token punctuation">;</span>           last <span class="token operator">=</span> meet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">;</span>           cout <span class="token operator">&lt;&lt;</span><span class="token string">"  选择第"</span><span class="token operator">&lt;&lt;</span>meet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token operator">&lt;&lt;</span><span class="token string">"个会议"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"最多可以安排"</span> <span class="token operator">&lt;&lt;</span>ans <span class="token operator">&lt;&lt;</span> <span class="token string">"个会议"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  setMeet sm<span class="token punctuation">;</span>  sm<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读入数据</span>  sm<span class="token punctuation">.</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//贪心算法求解</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输入</span><span class="token comment">/*输入会议总数：10输入会议的开始时间和结束时间，以空格分开：3 61 45 72 55 93 88 116 108 1212 14*/</span><span class="token comment">//输出</span><span class="token comment">/*排完序的会议时间如下：会议编号 开始时间 结束时间2 1 44 2 51 3 63 5 76 3 85 5 98 6 107 8 119 8 1210 12 14选择的会议的过程：选择第 2 个会议选择第 3 个会议选择第 7 个会议选择第 10 个会议最多可以安排 4 个会议*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法解析：-2"><a href="#算法解析：-2" class="headerlink" title="算法解析："></a>算法解析：</h3><ol><li>算法复杂度分析：<ul><li>时间复杂度：在该算法中，问题的规模就是会议总个数 n。显然，执行次数随问题规模的增大而变化。首先在成员函数 setMeet::init()中，输入 n 个结构体数据。输入作为基本语句，显然，共执行 n 次。而后在调用成员函数 setMeet::solve()中进行排序，易知 sort 排序函数的平均时间复杂度为 O(nlogn)。随后进行选择会议，贡献最大的为 if(meet[i].beg&gt;&#x3D;last)语句，时间复杂度为 O(n)，总时间复杂度为 O(n +nlogn)&#x3D; <strong>O(nlogn)</strong></li><li>空间复杂度：在该算法中，meet[]结构体数组为输入数据，不计算在空间复杂度内。辅助空间有 i、n、ans 等变量，则该程序空间复杂度为常数阶，即 <strong>O(1)</strong></li></ul></li><li>优化拓展：<ul><li>有没有更好的办法，比如有更小的算法时间复杂度？</li></ul></li></ol><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><p>给定有向带权图 G &#x3D;（V，Ｅ），其中每条边的权是非负实数。此外，给定 V 中的一个顶点，称为源点。现在要计算从源到所有其他各顶点的最短路径长度，这里路径长度指路上各边的权之和。</p><h3 id="算法设计：-3"><a href="#算法设计：-3" class="headerlink" title="算法设计："></a>算法设计：</h3><blockquote><p>Dijkstra 算法是解决单源最短路径问题的贪心算法，它<strong>先求出长度最短的一条路径</strong>，再参照该最短路径<strong>求出长度次短的一条路径</strong>，直到求出从源点到其他各个顶点的最短路径。</p></blockquote><p>Dijkstra 算法的基本思想是首先假定源点为 u，顶点集合 V 被划分为两部分：集合 S和 V−S。初始时 S 中仅含有源点 u，其中 S 中的顶点到源点的最短路径已经确定。集合V−S 中所包含的顶点到源点的最短路径的长度待定，称从源点出发只经过 S 中的点到达V−S 中的点的路径为特殊路径，并用数组 dist[]记录当前每个顶点所对应的最短特殊路径长度。将其连接的 V−S 中的顶点加入到集合 S 中，同时更新数组 dist[]。一旦 S 包含了所有顶点，dist[]就是从源到所有其他顶点之间的最短路径长度。</p><ol><li>数据结构。设置地图的带权邻接矩阵为 map[][]，即如果从源点 u 到顶点 i 有边，就令 map[u][i]等于&lt;u，i&gt;的权值，否则 map[u][i]&#x3D;∞（无穷大）；采用一维数组 dist[i]<br>来记录从源点到 i 顶点的最短路径长度；采用一维数组 p[i]来记录最短路径上 i 顶点的前驱。</li><li>初始化。令集合 S&#x3D;{u}，对于集合 V−S 中的所有顶点 x，初始化 dist[i]&#x3D;map[u][i]，如果源点 u 到顶点 i 有边相连，初始化 p[i]&#x3D;u，否则 p[i]&#x3D; −1。</li><li>找最小。在集合 V−S 中依照贪心策略来寻找使得 dist[j]具有最小值的顶点 t，即dist[t]&#x3D;min（dist[j]|j 属于 V−S 集合），则顶点 t 就是集合 V−S 中距离源点 u 最近的顶点。</li><li>加入 S 战队。将顶点 t 加入集合 S 中，同时更新 V−S。</li><li>判结束。如果集合 V−S 为空，算法结束，否则转（6）。</li><li>借东风。在（3）中已经找到了源点到 t 的最短路径，那么对集合 V−S 中所有与顶点 t 相邻的顶点 j，都可以借助 t 走捷径。如果 dis[j]&gt;dist[t]+map[t][j]，则 dist[j]&#x3D;dist[t]+map[t][j]，记录顶点 j 的前驱为 t，有 p[j]&#x3D; t，转（3）。</li></ol><p>由此，可求得从源点 u 到图 G 的其余各个顶点的最短路径及长度，也可通过数组 p[]逆向找到最短路径上经过的城市。</p><p>算法步骤如下。</p><p>初始景点地图：</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901224759504.png" alt="image-20220901224759504"></p><p>设置地图的带权邻接矩阵为 map[][]，即如果从顶点 i 到顶点 j 有边，则 map[i][j]等于&lt;i,j&gt;的权值，否则 map[i][j]&#x3D;∞（无穷大）:</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901224817141.png" alt="image-20220901224817141"></p><p>令集合 S&#x3D;{1}，V−S&#x3D;{2，3，4，5}，对于集合 V−S 中的所有顶点 x，初始化最短距离数组 dist[i]&#x3D;map[1][i]，dist[u]&#x3D;0，如图 2-12 所示。如果源点 1 到顶点 i 有边相连，初始化前驱数组 p[i]&#x3D;1，否则 p[i]&#x3D; −1，如图 2-13 所示：</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901225045842.png" alt="image-20220901225045842"></p><p>在集合 V−S&#x3D;{2，3，4，5}中，依照贪心策略来寻找 V−S 集合中 dist[]最小的顶点 t，如图 2-14 所示。<br>找到最小值为 2，对应的结点 t&#x3D;2。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901225130199.png" alt="image-20220901225130199"></p><p>将顶点 t&#x3D;2 加入集合 S 中 S&#x3D;{1，2}，同时更新 V−S&#x3D;{3，4，5}，如图 2-15 所示。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901225251138.png" alt="image-20220901225251138"></p><p>刚刚找到了源点到 t&#x3D;2 的最短路径，那么对集合 V−S 中所有 t 的邻接点 j，都可以借助 t 走捷径。我们从图或邻接矩阵都可以看出，2 号结点的邻接点是 3 和 4 号结点，如图 2-16 所示。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901225400247.png" alt="image-20220901225400247"></p><p>先看 3 号结点能否借助 2 号走捷径：dist[2]+map[2][3]&#x3D;2+2&#x3D;4，而当前 dist[3]&#x3D;5&gt;4，因此可以走捷径即 2—3，更新 dist[3]&#x3D;4，记录顶点 3 的前驱为 2，即 p[3]&#x3D; 2。<br>再看 4 号结点能否借助 2 号走捷径：如果 dist[2]+map[2][4]&#x3D;2+6&#x3D;8，而当前 dist[4]&#x3D;∞&gt;8，因此可以走捷径即 2—4，更新 dist[4]&#x3D;8，记录顶点 4 的前驱为 2，即 p[4]&#x3D; 2。<br>更新后如图 2-17 和图 2-18 所示。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901225409864.png" alt="image-20220901225409864"></p><p>在集合 V−S&#x3D;{3，4，5}中，依照贪心策略来寻找 dist[]具有最小值的顶点 t，依照贪心策略来寻找 V−S 集合中 dist[]最小的顶点 t，如图 2-19 所示。<br>找到最小值为 4，对应的结点 t&#x3D;3。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901225450417.png" alt="image-20220901225450417"></p><p>将顶点 t&#x3D;3 加入集合 S 中 S&#x3D;{1，2，3}，同时更新 V−S&#x3D;{4，5}，如图 2-20 所示。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901225518417.png" alt="image-20220901225518417"></p><p>刚刚找到了源点到 t &#x3D;3 的最短路径，那么对集合 V−S 中所有 t 的邻接点 j，都可以借助t 走捷径。我们从图或邻接矩阵可以看出，3 号结点的邻接点是 4 和 5 号结点。<br>先看 4 号结点能否借助 3 号走捷径：dist[3]+map[3][4]&#x3D;4+7&#x3D;11，而当前 dist[4]&#x3D;8&lt;11，比当前路径还长，因此不更新。<br>再看 5 号结点能否借助 3 号走捷径：dist[3]+map[3][5]&#x3D;4+1&#x3D;5，而当前 dist[5]&#x3D;∞&gt;5，因此可以走捷径即 3—5，更新 dist[5]&#x3D;5，记录顶点 5 的前驱为 3，即 p[5]&#x3D;3。<br>更新后如图 2-21 和图 2-22 所示。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901225552693.png" alt="image-20220901225552693"></p><p>在集合 V−S&#x3D;{4，5}中，依照贪心策略来寻找 V−S 集合中 dist[]最小的顶点 t，如图 2-23 所示。<br>找到最小值为 5，对应的结点 t&#x3D;5。</p><p>将顶点 t&#x3D;5 加入集合 S 中 S&#x3D;{1，2，3，5}，同时更新 V−S&#x3D;{4}，如图 2-24 所示。</p><p><img src="/2022/09/01/suan-fa-ru-men-tan-xin-suan-fa/image-20220901225914054.png" alt="image-20220901225914054"></p><p>刚刚找到了源点到 t &#x3D;5 的最短路径，那么对集合 V−S 中所有 t 的邻接点 j，都可以借助 t 走捷径。我们从图或邻接矩阵可以看出，5 号结点没有邻接点，因此不更新。</p><p>在集合 V−S&#x3D;{4}中，依照贪心策略来寻找 dist[]最小的顶点 t，只有一个顶点，所以很容易找到。<br>找到最小值为 8，对应的结点 t&#x3D;4。</p><p>V−S&#x3D;{ }为空时，算法停止。<br>由此，可求得从源点 u 到图 G 的其余各个顶点的最短路径及长度，也可通过前驱数组p[]逆向找到最短路径上经过的城市。</p><p>例如，p[5]&#x3D;3，即 5 的前驱是 3；p[3]&#x3D;2，即 3 的前驱是 2；p[2]&#x3D;1，即 2 的前驱是 1；p[1]&#x3D; −1，1 没有前驱，那么从源点 1 到 5 的最短路径为 1—2—3—5。</p><h3 id="运行代码：-3"><a href="#运行代码：-3" class="headerlink" title="运行代码："></a>运行代码：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//program 2-4</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 城市的个数可修改</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">1e7</span><span class="token punctuation">;</span> <span class="token comment">// 无穷大10000000</span><span class="token keyword">int</span> map<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token comment">//n城市的个数，m为城市间路线的条数</span><span class="token keyword">bool</span> flag<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//如果s[i]等于true，说明顶点i已经加入到集合S;否则顶点i属于集合V-S</span><span class="token keyword">void</span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>     dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>map<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//初始化源点u到其他各个顶点的最短路径长度</span>     flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>INF<span class="token punctuation">)</span>       p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//源点u到该顶点的路径长度为无穷大，说明顶点i与源点u不相邻</span>     <span class="token keyword">else</span>       p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>u<span class="token punctuation">;</span> <span class="token comment">//说明顶点i与源点u相邻，设置顶点i的前驱p[i]=u</span>     <span class="token punctuation">&#125;</span>    dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//初始时，集合S中只有一个元素：源点u</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> INF<span class="token punctuation">,</span>t <span class="token operator">=</span> u<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//在集合V-S中寻找距离源点u最近的顶点t</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>temp<span class="token punctuation">)</span>           <span class="token punctuation">&#123;</span>            t<span class="token operator">=</span>j<span class="token punctuation">;</span>            temp<span class="token operator">=</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>u<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span> <span class="token comment">//找不到t，跳出循环</span>        flag<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">//否则，将t加入集合</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//更新与t相邻接的顶点到源点u的距离</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>INF<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span>map<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>               dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span>map<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">;</span>               p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t <span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">findpath</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> x<span class="token punctuation">;</span>  stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>s<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"源点为："</span><span class="token operator">&lt;&lt;</span>u<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    x<span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      x<span class="token operator">=</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"源点到其它各顶点最短路径为："</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"--"</span><span class="token punctuation">;</span>      s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">";最短距离为："</span><span class="token operator">&lt;&lt;</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">,</span>st<span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"color 0d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入城市的个数："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入城市之间的路线的个数:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cin <span class="token operator">>></span>m<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入城市之间的路线以及距离："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>             map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>INF<span class="token punctuation">;</span><span class="token comment">//初始化邻接矩阵为无穷大</span>          <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> w<span class="token punctuation">;</span>            map<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//邻接矩阵储存，保留最小的距离</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span><span class="token string">"请输入小明所在的位置:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token punctuation">;</span>        cin <span class="token operator">>></span> st<span class="token punctuation">;</span>        <span class="token function">Dijkstra</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span><span class="token string">"小明所在的位置:"</span><span class="token operator">&lt;&lt;</span>st<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>             cout <span class="token operator">&lt;&lt;</span><span class="token string">"小明:"</span><span class="token operator">&lt;&lt;</span>st<span class="token operator">&lt;&lt;</span><span class="token string">" - "</span><span class="token operator">&lt;&lt;</span><span class="token string">"要去的位置:"</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span>               cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sorry,无路可达"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>             <span class="token keyword">else</span>               cout <span class="token operator">&lt;&lt;</span> <span class="token string">" 最短距离为:"</span><span class="token operator">&lt;&lt;</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token function">findpath</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输入</span><span class="token comment">/*请输入城市的个数：5请输入城市之间的路线的个数：11请输入城市之间的路线以及距离：1 5 125 1 81 2 162 1 295 2 322 4 134 2 271 3 153 1 213 4 74 3 19请输入小明所在的位置：5*/</span><span class="token comment">//输出</span><span class="token comment">/*小明所在的位置：5小明:5 - 要去的位置:1 最短距离为：8小明:5 - 要去的位置:2 最短距离为：24小明:5 - 要去的位置:3 最短距离为：23小明:5 - 要去的位置:4 最短距离为：30小明:5 - 要去的位置:5 最短距离为：0*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们在程序中使用 p[]数组记录了最短路径上每一个结点的前驱，因此除了显示最短距离外，还可以显示最短路径上经过了哪些城市，可以增加一段程序逆向找到该最短路径上的城市序列。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">findpath</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>s<span class="token punctuation">;</span><span class="token comment">//利用 C++自带的函数创建一个栈 s，需要程序头部引入#include&lt;stack></span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"源点为："</span><span class="token operator">&lt;&lt;</span>u<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        x<span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将前驱依次压入栈中</span>    x<span class="token operator">=</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"源点到其他各顶点最短路径为："</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"--"</span><span class="token punctuation">;</span><span class="token comment">//依次取栈顶元素</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出栈</span><span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">";最短距离为："</span><span class="token operator">&lt;&lt;</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需要在主函数末尾调用该函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">findpath</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//主函数中 st 为源点</span><span class="token comment">//输出结果如下</span><span class="token comment">/*源点为：5源点到其他各顶点最短路径为：5--1；最短距离为：8源点到其他各顶点最短路径为：5--1--2；最短距离为：24源点到其他各顶点最短路径为：5--1--3；最短距离为：23源点到其他各顶点最短路径为：5--1--3--4；最短距离为：30源点到其他各顶点最短路径为：5；最短距离为：0*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法解析：-3"><a href="#算法解析：-3" class="headerlink" title="算法解析："></a>算法解析：</h3><ol><li><p>算法复杂度分析：</p><ul><li>时间复杂度：在 Dijkstra 算法描述中，一共有 4 个 for 语句，第①个 for 语句的执行次数为 n，第②个 for 语句里面嵌套了两个 for 语句③、④，它们的执行次数均为 n，对算法的运行时间贡献最大，当外层循环标号为 1 时，③、④语句在内层循环的控制下均执行 n 次，外层循环②从 1～n。因此，该语句的执行次数为 n*n&#x3D; n²，算法的时间复杂度为 <strong>O(n²)</strong></li><li>空间复杂度：由以上算法可以得出，实现该算法所需要的辅助空间包含为数组 flag、变量 i、j、t 和 temp 所分配的空间，因此，空间复杂度为 <strong>O(n)</strong></li></ul></li><li><p>优化拓展：</p><ul><li><p>在 for 语句③中，即在集合 V−S 中寻找距离源点 u 最近的顶点 t，其时间复杂度为 O(n)，如果我们使用优先队列，则可以把时间复杂度降为 **O(log n)**那么如何使用优先队列呢？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//program 2-4-1</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 城市的个数可修改</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1e7</span><span class="token punctuation">;</span> <span class="token comment">// 无穷大</span><span class="token keyword">int</span> map<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> flag<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span>  <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span>step<span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> sp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        u<span class="token operator">=</span>a<span class="token punctuation">;</span>step<span class="token operator">=</span>sp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span>  Node<span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 重载 &lt;</span>        <span class="token keyword">return</span> step<span class="token operator">></span>a<span class="token punctuation">.</span>step<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    priority_queue <span class="token operator">&lt;</span>Node<span class="token operator">></span> Q<span class="token punctuation">;</span>  <span class="token comment">// 优先队列优化</span>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Node</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化flag数组为0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>      dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>INF<span class="token punctuation">;</span> <span class="token comment">// 初始化所有距离为，无穷大</span>    dist<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Node it<span class="token operator">=</span>Q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//优先队列队头元素为最小值</span>        Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t<span class="token operator">=</span>it<span class="token punctuation">.</span>u<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//说明已经找到了最短距离，该结点是队列里面的重复元素</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        flag<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>map<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>INF<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 判断与当前点有关系的点，并且自己不能到自己</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span>map<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>   <span class="token comment">// 求距离当前点的每个点的最短距离,进行松弛操作</span>                    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span>map<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Node</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把更新后的最短距离压入优先队列，注意：里面的元素有重复</span>                 <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">,</span>st<span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"color 0d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置背景及字体颜色</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入城市的个数："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入城市之间的路线的个数:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span>m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//初始化图的邻接矩阵</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>INF<span class="token punctuation">;</span><span class="token comment">//初始化邻接矩阵为无穷大</span>          <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入城市之间u,v的路线以及距离w："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cin<span class="token operator">>></span>u<span class="token operator">>></span>v<span class="token operator">>></span>w<span class="token punctuation">;</span>            map<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//邻接矩阵储存，保留最小的距离</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入小明所在的位置:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token punctuation">;</span>        cin<span class="token operator">>></span>st<span class="token punctuation">;</span>        <span class="token function">Dijkstra</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span><span class="token string">"小明所在的位置:"</span><span class="token operator">&lt;&lt;</span>st<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>             cout <span class="token operator">&lt;&lt;</span><span class="token string">"小明:"</span><span class="token operator">&lt;&lt;</span>st<span class="token operator">&lt;&lt;</span><span class="token string">"--->"</span><span class="token operator">&lt;&lt;</span><span class="token string">"要去的位置:"</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>INF<span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sorry,无路可达"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>             <span class="token keyword">else</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">" 最短距离为:"</span><span class="token operator">&lt;&lt;</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法入门-算法复杂性</title>
      <link href="/2022/08/30/suan-fa-ru-men-suan-fa-fu-za-xing/"/>
      <url>/2022/08/30/suan-fa-ru-men-suan-fa-fu-za-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="算法复杂性"><a href="#算法复杂性" class="headerlink" title="算法复杂性"></a>算法复杂性</h2><blockquote><p>算法是指对特定问题求解步骤的一种描述。</p></blockquote><p>算法具有以下特性：</p><ul><li><strong>有穷性</strong>：算法是由若干条指令组成的有穷序列，总是在执行若干次后结束，不可能永不停止。</li><li><strong>确定性</strong>：每条语句有确定的含义，无歧义。</li><li><strong>可行性</strong>：算法在当前环境条件下可以通过有限次运算实现。</li><li><strong>输入输出</strong>：有零个或多个输入，一个或多个输出。</li></ul><h3 id="时间复杂度："><a href="#时间复杂度：" class="headerlink" title="时间复杂度："></a>时间复杂度：</h3><blockquote><p>算法运行需要的时间，一般将<strong>算法的执行次数</strong>作为时间复杂度的度量标准。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//算法 1-3</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//运行1次</span>total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//运行1次</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//运行n次</span><span class="token punctuation">&#123;</span>  sum<span class="token operator">=</span>sum<span class="token operator">+</span>i<span class="token punctuation">;</span><span class="token comment">//运行n次</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//运行n*(n+1)次</span>total<span class="token operator">=</span>total<span class="token operator">+</span>i<span class="token punctuation">;</span><span class="token comment">//运行n*n次</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把算法的所有语句的运行次数加起来：1+1+<em>n</em>+1+<em>n</em>+<em>n</em>×(<em>n</em>+1)+<em>n</em>×<em>n</em>，可以用一个函数T(n)表达：<br>$$<br>T(n)&#x3D;2n^2+3n+3<br>$$<br>当n足够大时,我们可以看到算法运行时间主要取决于第一项，后面的甚至可以忽略不计。<br>用极限表示为：<br>$$<br>\lim_{n\rightarrow\infty}\frac{T(n)}{f(n)}&#x3D;C≠0，C为不等于0的常数<br>$$<br>如果用<strong>时间复杂度的渐近上界</strong>表示，如图1-1所示。</p><p><img src="/2022/08/30/suan-fa-ru-men-suan-fa-fu-za-xing/image-20220830204543034.png" alt="image-20220830204543034"></p><p>从图1-1中可以看出，当n≥n0时，T(m)≤Cf(n)，当n足够大时，T(n)和f(n)近似相等。因此，我们用O(f(n))来表示时间复杂度渐近上界，通常用这种表示法衡量算法时间复杂度。算法1-3的时间复杂度渐近上界为O(f(n))&#x3D;O(n^2)，用极限表示为：<br>$$<br>\lim_{n\rightarrow\infty}\frac{T(n)}{f(n)}&#x3D;\frac{2n^2+3n+3}{n^2}&#x3D;2≠0<br>$$<br>还有<strong>渐近下界</strong>符号Ω(T(n)≥Cf(n))，如图1-2所示。</p><p><img src="/2022/08/30/suan-fa-ru-men-suan-fa-fu-za-xing/image-20220830205123640.png" alt="image-20220830205123640"></p><p>从图1-2可以看出，当n≥n0时，T(n)≥Cf(n)，当n足够大时，T(n)和f(n)近似相等，因此，我们用Ω(f(n))来表示时间复杂度渐近下界。<br><strong>渐近精确界</strong>符号Θ(C1f(n)≤T(n)≤C2f(n))，如图1-3所示。</p><p><img src="/2022/08/30/suan-fa-ru-men-suan-fa-fu-za-xing/image-20220830210210688.png" alt="image-20220830210210688"></p><p>从图1-3中可以看出，当n≥n0时，C1f(n)≤T(n)≤C2f(n)，当n足够大时，T(n)和f(n)近似相等。这种两边逼近的方式，更加精确近似，因此，用<br>Θ(f(n))来表示时间复杂度渐近精确界。<br>我们通常使用<strong>时间复杂度渐近上界</strong>O(f(n))来表示时间复杂度。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//算法1-4</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//运行1次</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token comment">//可假设运行x次</span><span class="token punctuation">&#123;</span>i<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//可假设运行x次</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察算法1-4，无法立即确定while及i&#x3D;i*2运行了多少次。这时可假设运行了x次，每次运算后i值为2，2^2，2^3，…，2^x，当i&#x3D;n时结束，即2^x&#x3D;n时结束，则x&#x3D;log2(n)，那么算法1-4的运算次数为1+2log2(n)，时间复杂度渐近上界为O(f(n))&#x3D;O(log2(n))。</p><blockquote><p>注意：不是每个算法都能直接计算运行次数</p></blockquote><p>有些算法，如排序、查找、插入等算法，可以分为<strong>最好</strong>、<strong>最坏</strong>和<strong>平均</strong>情况分别求算法渐近复杂度，但我们考查一个算法通常考查最坏的情况，而不是考查最好的情况，<strong>最坏情况对衡量算法的好坏具有实际的意义</strong>。</p><h3 id="空间复杂度："><a href="#空间复杂度：" class="headerlink" title="空间复杂度："></a>空间复杂度：</h3><blockquote><p>算法占用的空间大小。一般将算法的<strong>辅助空间</strong>作为衡量空间复杂度的标准。</p></blockquote><p>空间复杂度的本意是指算法在运行过程中占用了多少存储空间。算法占用的存储空间包括：</p><ol><li>输入&#x2F;输出数据</li><li>算法本身</li><li>额外需要的辅助空间</li></ol><p>输入输出数据占用的空间是必需的，算法本身占用的空间可以通过精简算法来缩减，但这个压缩的量是很小的，可以忽略不计。而在运行时使用的辅助变量所占用的空间，即辅助空间是衡量空间复杂度的关键因素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//算法1-6</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token comment">//x与y交换</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span>temp<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//temp为辅助空间</span>x<span class="token operator">=</span>y<span class="token punctuation">;</span>y<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该算法使用了一个辅助空间temp，空间复杂度为O(1)。</p><blockquote><p>注意：递归算法中，每一次递推需要一个栈空间来保存调用记录，因此，空间复杂度需要计算递归栈的辅助空间。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//算法1-7</span><span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n&lt;0 data error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> n<span class="token operator">*</span><span class="token function">fac</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="斐波那契数列："><a href="#斐波那契数列：" class="headerlink" title="斐波那契数列："></a>斐波那契数列：</h2><p>根据斐波那契数列的定义，直接设计一个递归算法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Fib1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">Fib1</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">Fib1</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，n&gt;2时要分别调用Fib1(n-1)、Fib1(n-2)和执行一次加法运算，即：</p><p>n&gt;2时，T(n) &#x3D; T(n-1) + T(n-2) + 1;</p><p>递归表达式和时间复杂度T(n)之间的关系如下：</p><p><img src="/2022/08/30/suan-fa-ru-men-suan-fa-fu-za-xing/image-20220830214752191.png" alt="image-20220830214752191"></p><p>由此可得：T(n)≥F(n)。</p><p><img src="/2022/08/30/suan-fa-ru-men-suan-fa-fu-za-xing/image-20220830214934155.png" alt="image-20220830214934155"></p><p>由于T(n)≥F(n)，这是一个指数阶的算法！复杂度属于爆炸增量函数，这在算法设计时应当避开的，那么我们可以改进它呢？</p><p>既然斐波那契数列中的每一项是前两项之和，如果记录前两项的值，只需要一次加法运算就可以得到当前项，时间复杂度会不会更低一些？我们用数组试试看：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Fib2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显，算法的时间复杂度为O(n)。时间复杂度却从<strong>指数阶降到了多项式阶</strong>，这是算法效率的一个巨大突破！</p><p>其实我们只需要得到第n个斐波那契数，中间结果只是为了下一次使用，根本不需要记录。因此我们采用<strong>迭代法</strong>进行算法设计：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Fib3</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>s1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>s2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s2<span class="token operator">=</span>s1<span class="token operator">+</span>s2<span class="token punctuation">;</span><span class="token comment">//辗转相加法</span>s1<span class="token operator">=</span>s2<span class="token operator">-</span>s1<span class="token punctuation">;</span><span class="token comment">//记录前一项</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> s2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进一步讨论：我们能不能继续降阶，使算法时间复杂度更低呢？</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UESTC研究生选课</title>
      <link href="/2022/08/25/uestc-yan-jiu-sheng-xuan-ke/"/>
      <url>/2022/08/25/uestc-yan-jiu-sheng-xuan-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="选课"><a href="#选课" class="headerlink" title="选课"></a>选课</h2><h3 id="学位课-目前已选17分"><a href="#学位课-目前已选17分" class="headerlink" title="学位课 目前已选17分"></a>学位课 目前已选17分</h3><p>算法设计与分析（2班）–陈佳 2学分秋</p><p>随机过程与排队论（小班研讨）–顾小丰 2学分秋</p><p>工程伦理与学术道德（9班）–谢小东 1学分春与秋</p><p>新时代中国特色社会主义理论与实践（沙河二班）–曹银忠 2学分秋</p><p>图论及应用（15班）–王也洲 3学分春</p><p>网络计算模式（1班）–丁熠 2学分春</p><p>高级计算机结构（不要选吴晓华的）或选其他学位课</p><p>硕士研究生学位英语–庞慧 3学分春与秋</p><h3 id="非学位课-目前已选10分"><a href="#非学位课-目前已选10分" class="headerlink" title="非学位课 目前已选10分"></a>非学位课 目前已选10分</h3><p>Unix&#x2F;Linux操作系统内核结构（2班）–刘玓 2学分秋</p><p>网络安全理论与技术（2班）–李树全 2学分秋</p><p>网络编程–任立勇 2学分秋</p><p>高级数字图像处理–甘涛 2学分秋</p><p>研究生论文写作指导课程（2班）–李晓瑜 1学分春</p><p>自然辩证法概论（沙河4班）–不要选郭芙蕊 1学分春</p><h3 id="教学实践环节-目前已选6分"><a href="#教学实践环节-目前已选6分" class="headerlink" title="教学实践环节 目前已选6分"></a>教学实践环节 目前已选6分</h3><p>逆向工程–何兴高 2学分春</p><p>基地实践 4学分春与秋</p><h3 id="必修环节-目前已选5-5分"><a href="#必修环节-目前已选5-5分" class="headerlink" title="必修环节 目前已选5.5分"></a>必修环节 目前已选5.5分</h3><p>学术资源的使用与分析3班–曹学艳 1学分秋</p><p>教学实践或创新创业与社会实践 1学分春与秋</p><p>论文开题报告 1学分春与秋</p><p>论文中期报告 1学分春与秋</p><p>学术活动 1学分春与秋</p><p>上学期的课：</p><p><img src="/2022/08/25/uestc-yan-jiu-sheng-xuan-ke/image-20220825220711481.png" alt="image-20220825220711481"></p><p>下学期的课：</p><p><img src="/2022/08/25/uestc-yan-jiu-sheng-xuan-ke/image-20220825220804082.png" alt="image-20220825220804082"></p><h3 id="上学期已选学分："><a href="#上学期已选学分：" class="headerlink" title="上学期已选学分："></a>上学期已选学分：</h3><p>学位课：5分</p><p>非学位课：8分</p><p>必修环节：1分</p><p>实践教学环节：0分</p><h3 id="下学期应选学分："><a href="#下学期应选学分：" class="headerlink" title="下学期应选学分："></a>下学期应选学分：</h3><p>学位课：6分（学位英语3学分，新中特2学分）</p><ul><li>网络计算模式 2学分</li><li>图论及应用 3学分</li><li>软件架构模型与设计 2学分</li></ul><p>非学位课：1分</p><ul><li>研究生论文写作指导课程 1学分</li></ul><p>必修环节：4分</p><ul><li>教学实践或创新创业与社会实践 1学分</li><li>学术活动 1学分</li><li>论文开题报告 1学分</li><li>论文中期报告 1学分</li></ul><p>实践教学环节：6分</p><ul><li>基地实践 4学分</li><li>逆向工程 2学分</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硕士生涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Vite快速建立一个Vue项目</title>
      <link href="/2022/08/19/shi-yong-vite-kuai-su-jian-li-yi-ge-vue-xiang-mu/"/>
      <url>/2022/08/19/shi-yong-vite-kuai-su-jian-li-yi-ge-vue-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h3 id="使用Vite创建Vue项目："><a href="#使用Vite创建Vue项目：" class="headerlink" title="使用Vite创建Vue项目："></a>使用Vite创建Vue项目：</h3><ol><li><p>在全局安装好node.js环境的前提下，切换到你想要创建项目的目录下，终端输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> init vite@latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Vite在安装项目时不会主动安装依赖，所以需要手动安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动项目：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="Vite3-0更新内容："><a href="#Vite3-0更新内容：" class="headerlink" title="Vite3.0更新内容："></a>Vite3.0更新内容：</h3><p>2022年7月，Vite3.0版本正式发布，有以下更新内容：</p><ol><li><p><strong>CLI的更新</strong>：</p><p>在执行 vite 命令启动项目时，终端的界面和之前会有所不同，而更重要的是，为了避免 Vite 开发服务的端口和别的应用冲突，默认的端口号从之前的 3000 变成了 <strong>5173</strong>。</p></li><li><p><strong>开箱即用的 WebSocket 连接策略</strong>：</p><p>Vite 2 中有存在一个痛点，即在存在代理的情况下(比如 Web IDE)需要我们手动配置 WebSocket 使 HMR 生效。目前 Vite 内置了一套更加完善的 WebSocket 连接策略，自动满足更多场景的 HMR 需求。</p></li><li><p><strong>服务冷启动性能提升</strong>：</p><p>Vite 3.0 在服务冷启动方面做了非常多的工作，来最大程度提升项目启动的速度。</p><p>首先我们来盘点一下 Vite 2.x 阶段服务冷启动的一些问题。</p><p>从 Vite 2.0 到 2.9 版本之前，Vite 会在服务启动之前进行依赖预构建，也就是使用 Esbuild 将项目中使用到的依赖扫描出来(Scan)，然后分别进行一次打包(Optimize)。</p><p><img src="/2022/08/19/shi-yong-vite-kuai-su-jian-li-yi-ge-vue-xiang-mu/c3cfb6a684fa99a5c3041509de0efe32d14316.png"></p><p>这样会造成两个问题：</p><blockquote><ul><li>依赖预构建会阻塞 Dev Server 启动，但其实不阻塞的情况下，Dev Server 也可以正常启动。</li><li>当某些 Vite 插件手动注入了 import 语句，比如调用babel-plugin-import 添加import Button from ‘antd&#x2F;lib&#x2F;button’，就会导致 Vite 的二次预构建，因为antd&#x2F;lib&#x2F;button 的引入代码由 Vite 插件注入，属于 Dev Server 运行时发现的依赖，冷启动阶段无法扫描到。</li></ul></blockquote><p>所谓的二次预构建包含两个步骤，一是需要将所有的依赖全量预构建，二是由于依赖更新，页面需要进行 reload，加载最新的依赖代码。这样会导致 Dev Server 性能明显下降，尤其是在新增依赖较多的场景下，很容易出现浏览器卡住的情况。因此二次预构建也是需要极力避免的。当时 vite-plugin-optimize-persist就是为了解决二次预构建带来的问题，通过持久化的方式记录 Dev Server 运行时扫描到的依赖，从而让首次预构建便可以感知到，避免二次预构建的发生。</p><p>到了 2.9 版本，Vite 将预构建的逻辑做了一次整体的重构，最后的效果是下面这样的：</p><ul><li><p>Dev Server 启动后预构建(Optimize 阶段)在后台执行，也就是预构建不再阻塞 Dev Server 的启动，只需要等待 Scan 阶段完成，不过通常这个阶段的开销非常小。</p><p><img src="/2022/08/19/shi-yong-vite-kuai-su-jian-li-yi-ge-vue-xiang-mu/321e2ec83707448c7ff3914fd6007c66cec4bc.png"></p></li><li><p>如果某些依赖是 Dev Server 运行时才发现的，那么 Vite 会尽可能地复用已有预构建产物，尽量不进行 page reload。</p></li></ul><p>那问题就完全解决了吗？其实并不是，在某些场景下，Vite 仍然不可避免地需要二次预构建。如下面的这个例子：</p><p><img src="/2022/08/19/shi-yong-vite-kuai-su-jian-li-yi-ge-vue-xiang-mu/b8775ee25f447b0377145799ba9b0d9b29fbdd.png"></p><p>A 和 B 都是项目的第三方依赖，它们也同时依赖 C。那么当 Vite 预构建 A 的时候，将会 A 和 C 一起进行打包。但 Vite 在运行时发现了依赖 B，而 A 和 B 需要共享 C 的代码，这样 C 的代码可能就会被抽离成一个公共的 chunk，因此之前 A 的预构建产物可能就发生变化了，那么此时 Vite 必须要强制刷新页面，让浏览器使用最新的预构建产物。这仍然是一个二次预构建(所有依赖再次打包 + page reload)的过程。</p><p>总体而言，2.9 版本解决了预构建阻塞服务启动的问题，但并没有完全解决二次预构建的问题。</p><p>但在 Vite 3.0，二次预构建的问题也得到了根本的解决。那 Vite 3.0 是如何做到的呢？</p><p>核心的解决思路在于<strong>延迟处理</strong>，<strong>即把预构建的行为延迟到页面加载的最后阶段进行</strong>，此时 Vite 已经编译完了所有的源文件，可以准确地记录下所有需要预构建的依赖(包括 Vite 插件添加的一些依赖)，然后统一进行预构建，将预构建的产物响应给给浏览器即可。</p><p>因此，与 Vite 2.0 相比，Vite 3.0 在冷启动阶段所做的优化主要有两个方面：</p><blockquote><ul><li>预构建不再阻塞 Dev Server 的启动，真正做到服务秒启动的效果。</li><li>从根本上防止二次预构建的发生。</li></ul></blockquote></li><li><p><strong>import.meta.glob 语法更新</strong>：</p><ol><li><p>Vite 3.0 中重写对 import.meta.glob 的实现进行了重写，支持了更加灵活的 glob 语法，增加了如下的一些特性：</p><ul><li>多种模式匹配：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./dir/*.js"</span><span class="token punctuation">,</span> <span class="token string">"./another/*.js"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>否定模式(!)：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./dir/*.js"</span><span class="token punctuation">,</span> <span class="token string">"!**/bar.js"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>命名导入，可以更好地做到 Tree Shaking：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"./dir/*.js"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">"setup"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>自定义 query 参数：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"./dir/*.js"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">custom</span><span class="token operator">:</span> <span class="token string">"data"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>指定 eager 模式，替换掉原来import.meta.globEager：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"./dir/*.js"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">eager</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p><strong>SSR 产物默认使用 ESM 格式</strong>：</p><p>在当下的社区生态中，众多 SSR 框架已经在使用 ESM 格式作为默认的产物格式。Vite 3.0 也积极拥抱社区，支持 SSR 构建默认打包出 ESM 格式的产物。</p></li><li><p><strong>Relative Base 支持</strong>：</p><p>Vite 3.0 正式支持 Relative Base(即配置base: ‘’)，主要用于构建时无法确定 base 地址的场景。</p></li><li><p><strong>更细粒度的 base 配置</strong>：</p><p>在某些场景下，我们需要将不同的资源部署到不同的 CDN 上，比如将图片部署到单独的 CDN，和 JS&#x2F;CSS 的部署服务区分开来。但 2.x 的版本仅支持统一的部署域名，即base 配置。在 3.0 中，你可以通过 renderBuiltUrl 进行更细粒度的配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">experimental</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">renderBuiltUrl</span><span class="token operator">:</span> <span class="token punctuation">(</span>filename<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">hostType</span><span class="token operator">:</span> <span class="token string">'js'</span> <span class="token operator">|</span> <span class="token string">'css'</span> <span class="token operator">|</span> <span class="token string">'html'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hostType <span class="token operator">===</span> <span class="token string">'js'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">runtime</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">window.__toCdnUrl(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">'https://cdn.domain.com/assets/'</span> <span class="token operator">+</span> filename      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//目前该配置项还不稳定 ，可能会在之后的 minor 版本修改。具体文档见 https://vitejs.dev/guide/build.html#advanced-base-options</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>Esbuild 预构建用于生产环境</strong>：</p><p>这应该是 Vite 架构上非常大的一个改动: 将原来仅仅用于开发阶段的依赖预构建功能应用在生产环境。在 Vite 2.x 中，开发阶段使用 Esbuild 来打包依赖，而在生产环境使用 Rollup 进行打包，用 @rollupjs&#x2F;plugin-commonjs 来处理 cjs 的依赖，这样做会导致依赖处理的不一致问题，造成一些生产构建中的 bug。</p><p>但 Vite 3.0 中支持通过配置将 Esbulid 预构建同时用于开发环境和生产环境，仅添加optimizeDeps.disabled: false 的配置即可。不过这个改动确实比较大，Vite 团队不打算将此作为 v3 的正式更新内容，而是一个实验性质的功能，不会默认开启。</p><p>顺便提一句，Rollup 将在接下来的几个月发布 v3 的大版本，要知道，Rollup 2.0 发布至今已经过去 2 年多的时间了，无论是 Rollup 还是 Vite 来讲，这都是一次非常重大的变更。由于 Vite 的架构非常依赖 Rollup，在 Rollup 发布 v3 之后，Vite 也将跟随着发布 Vite 的第 4 个 major 版本。所以，Vite 4.0 的到来也不远啦：）</p></li><li><p><strong>仓库内部的变化</strong>：</p><p>除了本身功能上的演进，Vite 的仓库本身也产生了不少的变化，从中我们也能了解到社区的一些动向:</p><ul><li>不再支持 Nodejs 12，需要 Node.js 14.18+ 的版本。</li><li>单元测试和 E2E 测试从 Jest 完全迁移到 Vitest，一方面 Vitest 更快、体验更好，另一方面也能在 Vite 这样大型的仓库完善 Vitest 的生态，进一步提升 Vitest 稳定性。</li><li>VitePress 文档部分也参与 CI 流程。</li><li>包管理器 pnpm 迁移至 v7。</li><li>不管是Vite 本身的包还是 E2E 中测试的项目，都在 package.json 中声明type: “module”，即 Pure ESM 包，对外提供 ESM 格式的产物，将社区 Pure ESM 的趋势又推动了一步。</li><li>官方所有的 Vite 插件都采用unbuild(新一代库构建工具) 进行构建，pluin-vue-jsx 和plugin-legacy 均迁移到了 TS 上。</li><li>包体积优化。3.0 进一步优化 Vite 本身的产物和 node_modules 体积，将terser 和node-forge 的依赖移除，让用户进行按需安装(node-forge 的功能是实现 https 证书生成，可用@vitejs&#x2F;plugin-basic-ssl 插件替代)，效果如下：</li></ul><table><thead><tr><th></th><th>Publish Size</th><th>Install Size</th></tr></thead><tbody><tr><td>Vite 2.9.14</td><td>4.38MB</td><td>19.1MB</td></tr><tr><td>Vite 3.0.0</td><td>3.05MB</td><td>17.8MB</td></tr><tr><td>Reduction</td><td>-30%</td><td>-7%</td></tr></tbody></table><p>不得不说在自身包体积的优化方面， Vite 对于还是做的很细致的，这也是很多库开发者忽视的一点，有时候加个插件就得安装动辄上百 MB 的依赖，导致项目的 node_modules 最后变得非常臃肿，此时不妨学习一下 Vite 是怎么优化自身体积的。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Vue中的组件知识</title>
      <link href="/2022/08/19/guan-yu-vue-zhong-de-zu-jian-zhi-shi/"/>
      <url>/2022/08/19/guan-yu-vue-zhong-de-zu-jian-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="创建组件的注意事项："><a href="#创建组件的注意事项：" class="headerlink" title="创建组件的注意事项："></a>创建组件的注意事项：</h3><blockquote><p>在HTML模板中使用组件时，首字母大写的形式只能在template配置项中的HTML代码中使用，或者在单文件组件的HTML中使用。</p><p>如果在像index.html这种纯html文件中使用组件时，必须使用<strong>小写单词+短横线</strong>的形式。</p><p>定义名字的时候尽量使用两个或以上的单词，避免和原生的HTML标签名冲突。</p><p>组件数据的流向设计：<strong>属性向下，事件向上</strong>，即父组件只能向子组件传递数据，子组件不能修改父组件的属性，父组件也不能访问子组件中的属性，子组件可通过事件触发父组件中的事件。</p></blockquote><h3 id="props："><a href="#props：" class="headerlink" title="props："></a>props：</h3><blockquote><p>组件实例的作用域是孤立的。这意味着不能 (也不应该) 在子组件的模板内直接引用父组件的数据。父组件的数据需要通过 prop 才能下发到子组件中。也就是<code>props</code>是<strong>子组件访问父组件数据的唯一接口</strong>。</p><ul><li>单向数据流</li><li>父组件属性变化，子组件自动刷新</li><li>子组件不能直接修改父组件属性</li></ul></blockquote><p>你可以基于对象的语法使用以下选项：</p><ul><li><code>type</code>: 可以是下列原生构造函数中的一种：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Array</code>、<code>Object</code>、<code>Date</code>、<code>Function</code>、<code>Symbol</code>、任何自定义构造函数、或上述内容组成的数组。会检查一个 prop 是否是给定的类型，否则抛出警告。Prop 类型的<a href="vue/guide/components-props.html#Prop-%E7%B1%BB%E5%9E%8B">更多信息在此</a>。</li><li><code>default</code>: <code>any</code><br>为该 prop 指定一个默认值。如果该 prop 没有被传入，则换做用这个值。对象或数组的默认值必须从一个工厂函数返回。</li><li><code>required</code>: <code>Boolean</code><br>定义该 prop 是否是必填项。在非生产环境中，如果这个值为 truthy 且该 prop 没有被传入的，则一个控制台警告将会被抛出。</li><li><code>validator</code>: <code>Function</code><br>自定义验证函数会将该 prop 的值作为唯一的参数代入。在非生产环境下，如果该函数返回一个 falsy 的值 (也就是验证失败)，一个控制台警告将会被抛出。你可以在<a href="vue/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81">这里</a>查阅更多 prop 验证的相关信息。</li></ul><p>示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"sender"</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"time"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>     <span class="token literal-property property">isStudent</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>         <span class="token literal-property property">type</span><span class="token operator">:</span>Boolean<span class="token punctuation">,</span>         <span class="token keyword">default</span><span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">// 可声明默认值</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 不同类型的数据，注意默认值的返回类型</span><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">"abc"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">followers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 即使是空数组，也需要从函数中返回</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">handleClick</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>     <span class="token comment">// 可以在props中校验数据</span>     <span class="token function">validator</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token literal-property property">sender</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在父组件中，首先需要引入组件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> MessageItem <span class="token keyword">from</span> <span class="token string">"./components/MessageItem.vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    MessageItem  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向子组件传值：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token comment">&lt;!-- 使用v-bind才可以传送数据本身的属性值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MessageItem</span>  <span class="token attr-name">:user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;haha:222&#125;</span> <span class="token attr-name">:time</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>2022</span> <span class="token attr-name">sender</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MessageItem</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="emit："><a href="#emit：" class="headerlink" title="emit："></a>emit：</h3><blockquote><p>子组件可以使用 $emit <strong>触发父组件的自定义事件</strong>。</p><p>Vue虽然也支持通过props向父组件传递数据，但如此做子组件就会<strong>依赖</strong>父组件，即如果父组件没有传递参数，且子组件的事件处理函数也没有默认值，那么子组件调用事件处理函数就会报出异常；而使用emit事件传递则没有这个问题，如果父组件不处理子组件的事件也没有任何问题，因为子组件不依赖父组件的事件监听。</p></blockquote><ul><li><p>参数</p><ul><li><code>&#123;string&#125; eventName</code></li><li><code>[...args]</code></li></ul><p>触发当前实例上的事件。附加参数都会传给监听器回调。</p></li><li><p>示例</p><p>在子组件中，定义emits数组以及触发事件，可添加多个参数：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"deletePosts"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$emit(<span class="token punctuation">'</span>deletePosts<span class="token punctuation">'</span>, 5)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可自定义方法，例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectPosts(5)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">selectPosts</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"deletePosts"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// selectPosts事件触发后，自动触发deletePosts事件</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在父组件中，首先需要引入组件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> MessageItem <span class="token keyword">from</span> <span class="token string">"./components/MessageItem.vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    MessageItem  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父组件触发方法：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MessageItem</span>  <span class="token attr-name">@deletePosts</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleDeletePosts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MessageItem</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> MessageItem <span class="token keyword">from</span> <span class="token string">"./components/MessageItem.vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    MessageItem  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">handleDeletePosts</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="provide和inject："><a href="#provide和inject：" class="headerlink" title="provide和inject："></a>provide和inject：</h3><blockquote><p>在实际开发中，可能需要传递数据到更深层次的组件，例如子组件的子组件，即使中间的组件没有用到这个属性也要层层传递。</p></blockquote><p>Vue中提供了<code>provide</code>配置项来向<strong>所有下层组件</strong>传递数据，而用到数据的组件可以使用<code>inject</code>配置项来获取数据：</p><ul><li><strong>类型</strong>：<ul><li><strong>provide</strong>：<code>Object | () =&gt; Object</code></li><li><strong>inject</strong>：<code>Array&lt;string&gt; | &#123; [key: string]: string | Symbol | Object &#125;</code></li></ul></li></ul><p>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。如果你熟悉 React，这与 React 的上下文特性很相似。</p><p><code>provide</code> 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。在该对象中你可以使用 ES2015 Symbols 作为 key，但是只在原生支持 <code>Symbol</code> 和 <code>Reflect.ownKeys</code> 的环境下可工作。</p><p><code>inject</code> 选项应该是：</p><ul><li>一个字符串数组，或</li><li>一个对象，对象的 key 是本地的绑定名，value 是：<ul><li>在可用的注入内容中搜索用的 key (字符串或 Symbol)，或</li><li>一个对象，该对象的：<ul><li><code>from</code> 属性是在可用的注入内容中搜索用的 key (字符串或 Symbol)</li><li><code>default</code> 属性是降级情况下使用的 value</li></ul></li></ul></li></ul><blockquote><p>注意：<code>provide</code> 和 <code>inject</code> 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。</p></blockquote><ul><li><p>示例：</p><p>MovieCard.vue文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MovieItem</span>      <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movie.title<span class="token punctuation">"</span></span>      <span class="token attr-name">:description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movie.description<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> MovieItem <span class="token keyword">from</span> <span class="token string">"./MovieItem.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    MovieItem<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">movie</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"电影"</span><span class="token punctuation">,</span>        <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">"这是一段电影的描述"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.card</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">hsl</span><span class="token punctuation">(</span>240deg<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MovieItem.vue文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MovieTitle</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123; description &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> MovieTitle <span class="token keyword">from</span> <span class="token string">"./MovieTitle.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> MovieTitle <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"description"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.description</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>240deg<span class="token punctuation">,</span> 10%<span class="token punctuation">,</span> 88%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MovieTitle.vue文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123; title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">h2</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>240deg<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出组件的层级关系，中间组件尽管没有使用到title属性，但仍需要将其加入到props配置项中，向下传递到MovieTitle.vue文件中。若使用<code>provide</code>和<code>inject</code>配置项，则简洁很多：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- &lt;MovieItem :title="movie.title" :description="movie.description" /> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MovieItem</span> <span class="token attr-name">:description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movie.description<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> MovieItem <span class="token keyword">from</span> <span class="token string">"./MovieItem.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    MovieItem<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">movie</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"电影"</span><span class="token punctuation">,</span>        <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">"这是一段电影的描述"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">provide</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"测试电影"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.card</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">hsl</span><span class="token punctuation">(</span>240deg<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- &lt;MovieTitle :title="title" /> --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MovieTitle</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123; description &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> MovieTitle <span class="token keyword">from</span> <span class="token string">"./MovieTitle.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> MovieTitle <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// props: ["title", "description"],</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"description"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.description</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>240deg<span class="token punctuation">,</span> 10%<span class="token punctuation">,</span> 88%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123; title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// props: ["title"],</span>  <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">h2</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>240deg<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但如此做<code>provide</code>中的title属性没有与data中的title属性相对应，若修改为以下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">provide</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>movie<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则会报错：</p><p><img src="/2022/08/19/guan-yu-vue-zhong-de-zu-jian-zhi-shi/image-20220819210345147.png" alt="image-20220819210345147"></p><p>原因是如果需要<code>provide</code>提供data中的属性，则需要将<code>provide</code>写为一个函数，类似data中的形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>movie<span class="token punctuation">.</span>title<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="如何修改子组件中的样式："><a href="#如何修改子组件中的样式：" class="headerlink" title="如何修改子组件中的样式："></a>如何修改子组件中的样式：</h3><p>对于子组件中的根元素，可通过普通CSS样式书写格式进行修改，若想为子组件中除根元素以外的元素，则需要使用<code>deep</code>选择器：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.text :deep(a)</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 70%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ref："><a href="#ref：" class="headerlink" title="ref："></a>ref：</h3><p>Vue提供了一种机制，可以获取到组件的实例并访问其中的属性，即为<code>ref</code>。使用<code>ref</code>可以访问到原生的HTML的DOM实例，也可以获取Vue组件的实例，但会破坏数据的流向，所以万不得已的时候最好不要使用。</p><p>在子组件中：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputText<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputControl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">inputText</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>inputControl<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>inputControl<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">input</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 8px 14px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">hsl</span><span class="token punctuation">(</span>280deg<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>280deg<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 30%<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在父组件中：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AutoFocus</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> AutoFocus <span class="token keyword">from</span> <span class="token string">"./components/AutoFocus.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    AutoFocus<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>autofocus<span class="token punctuation">.</span>inputText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>autofocus<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> <span class="token string">"PingFang SC"</span><span class="token punctuation">,</span> <span class="token string">"Microsoft Yahei"</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #0f141c<span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>    #212943 0.6000000000000001px<span class="token punctuation">,</span>    #0f141c 0.6000000000000001px  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> 12px 12px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#app</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">place-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="让组件支持v-model指令："><a href="#让组件支持v-model指令：" class="headerlink" title="让组件支持v-model指令："></a>让组件支持v-model指令：</h3><p>示例：</p><p>子组件SearchInput.vue文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>搜索：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">input</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 8px 14px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">hsl</span><span class="token punctuation">(</span>280deg<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>280deg<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 30%<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父组件App.vue文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SearchInput</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchTerm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;searchTerm&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> SearchInput <span class="token keyword">from</span> <span class="token string">"./components/SearchInput.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    SearchInput<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">SearchTerm</span><span class="token operator">:</span> <span class="token string">""</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> <span class="token string">"PingFang SC"</span><span class="token punctuation">,</span> <span class="token string">"Microsoft Yahei"</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #0f141c<span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>    #212943 0.6000000000000001px<span class="token punctuation">,</span>    #0f141c 0.6000000000000001px  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> 12px 12px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#app</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">place-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时v-model并不能生效，需要在子组件中添加属性：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>搜索：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>      <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modelValue<span class="token punctuation">"</span></span>      <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$emit(<span class="token punctuation">'</span>update:modelValue<span class="token punctuation">'</span>, $event.target.value)<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"modelValue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"update:modelValue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">input</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 8px 14px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">hsl</span><span class="token punctuation">(</span>280deg<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>280deg<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 30%<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若需要多个v-model，添加更多属性，并加以区分：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>搜索：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>      <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchTerm<span class="token punctuation">"</span></span>      <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$emit(<span class="token punctuation">'</span>update:searchTerm<span class="token punctuation">'</span>, $event.target.value)<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>类别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span>      <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category<span class="token punctuation">"</span></span>      <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$emit(<span class="token punctuation">'</span>update:category<span class="token punctuation">'</span>, $event.target.value)<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>默认<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fontend<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>backend<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>后端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fullstack<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全栈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"searchTerm"</span><span class="token punctuation">,</span> <span class="token string">"category"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"update:searchTerm"</span><span class="token punctuation">,</span> <span class="token string">"update:category"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">label</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">input</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 8px 14px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">hsl</span><span class="token punctuation">(</span>280deg<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>280deg<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 30%<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">select</span> <span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">hsl</span><span class="token punctuation">(</span>280deg<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- v-model 后面的参数必须和子组件接收的属性名相同，例如 searchTerm --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SearchInput</span>        <span class="token attr-name"><span class="token namespace">v-model:</span>searchTerm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchTerm<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">v-model:</span>category</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category<span class="token punctuation">"</span></span>      <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>splitLine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>搜索词：&#123;&#123; searchTerm &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>类别：&#123;&#123; category &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> SearchInput <span class="token keyword">from</span> <span class="token string">"./components/SearchInput.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    SearchInput<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 名字无需和 SearchInput 中的属性名相同</span>      <span class="token comment">// 例如这里可以叫 searchQuery，</span>      <span class="token literal-property property">searchTerm</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> <span class="token string">"PingFang SC"</span><span class="token punctuation">,</span> <span class="token string">"Microsoft Yahei"</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #0f141c<span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>    #212943 0.6000000000000001px<span class="token punctuation">,</span>    #0f141c 0.6000000000000001px  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> 12px 12px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#app</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">place-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.splitLine</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px dashed <span class="token function">hsl</span><span class="token punctuation">(</span>280deg<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>50deg<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用动态组件渲染不同的HTML标签："><a href="#使用动态组件渲染不同的HTML标签：" class="headerlink" title="使用动态组件渲染不同的HTML标签："></a>使用动态组件渲染不同的HTML标签：</h3><blockquote><p>使用<code>:is</code>+HTML标签（可能需要用到计算属性）</p></blockquote><p>父组件App.vue文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 动态 HTML 元素  --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextHeading</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TextHeading</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextHeading</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TextHeading</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextHeading</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>三级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TextHeading</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextHeading</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>四级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TextHeading</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextHeading</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>五级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TextHeading</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextHeading</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>六级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TextHeading</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> TextHeading <span class="token keyword">from</span> <span class="token string">"./components/TextHeading.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    TextHeading<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件TextHeading.vue文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"level"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">heading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">h</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>level<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h2</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 2.4em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h3</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.8em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h4</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.4em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h5</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h6</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用动态组件渲染不同的Vue组件："><a href="#使用动态组件渲染不同的Vue组件：" class="headerlink" title="使用动态组件渲染不同的Vue组件："></a>使用动态组件渲染不同的Vue组件：</h3><blockquote><p>使用<code>:is</code>+组件名称</p></blockquote><p>例如此功能实现两个表单组件的切换：</p><p>登录表单文件ProfileForm.vue：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>昵称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>生日：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">::-webkit-calendar-picker-indicator</span> <span class="token punctuation">&#123;</span>  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">invert</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册表单文件RegisterForm.vue：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>手机号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span>      <span class="token punctuation">></span></span>验证码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendSMSCodeBtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        发送验证码      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span>    <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.sendSMSCodeBtn</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父组件App.vue文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentForm<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>          <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentForm === <span class="token punctuation">'</span>RegisterForm<span class="token punctuation">'</span><span class="token punctuation">"</span></span>          <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentForm = <span class="token punctuation">'</span>ProfileForm<span class="token punctuation">'</span><span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>          下一步        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentForm === <span class="token punctuation">'</span>ProfileForm<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentForm = <span class="token punctuation">'</span>RegisterForm<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            上一步          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> RegisterForm <span class="token keyword">from</span> <span class="token string">"./components/RegisterForm.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ProfileForm <span class="token keyword">from</span> <span class="token string">"./components/ProfileForm.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    RegisterForm<span class="token punctuation">,</span>    ProfileForm<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">currentForm</span><span class="token operator">:</span> <span class="token string">"RegisterForm"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，如果仅使用这种方法切换表单，会导致表单数据缺失，原因是因为使用动态组件每次切换组件时，都会创建新的组件实例。</p></blockquote><p>改进：</p><blockquote><p>在<code>Component</code>标签外绑定<code>KeepAlive</code>标签</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 动态组件默认每次渲染都会重新创建，数据会丢失，使用 &lt;KeepAlive>&lt;/KeepAlive> 组件可以缓存组件，避免数据丢失 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeepAlive</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentForm<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>KeepAlive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件传送"><a href="#组件传送" class="headerlink" title="组件传送"></a>组件传送</h3><h4 id="在其他DOM元素挂载组件："><a href="#在其他DOM元素挂载组件：" class="headerlink" title="在其他DOM元素挂载组件："></a>在其他DOM元素挂载组件：</h4><blockquote><p>某些组件可能在逻辑上不属于任何父组件，例如页面边缘的提示框，它们会根据<code>body</code>元素进行绝对定位。如果我们将它们放在某个父组件中，那么它们的位置就会限制于父组件容器内。</p></blockquote><blockquote><p>Vue提供了<code>teleport</code>属性，可以让子组件挂载在其他页面元素上。</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alertBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>closeIcon<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>消息提示框组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Teleport</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多次传送组件："><a href="#多次传送组件：" class="headerlink" title="多次传送组件："></a>多次传送组件：</h4><p>如果一个组件多次传送到相同的页面下，那么传送的顺序会追加到页面中，例如要弹出多个消息提示框：</p><p>在index.html文件中添加：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vite App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 添加messages --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>messages<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/src/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在父组件App.vue文件中：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msgs.push(`这是一段消息$&#123;msgs.length + 1&#125;`)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        添加消息      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AlertBox</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg in msgs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AlertBox</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> AlertBox <span class="token keyword">from</span> <span class="token string">"./components/AlertBox.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    AlertBox<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">msgs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> <span class="token string">"PingFang SC"</span><span class="token punctuation">,</span> <span class="token string">"Microsoft Yahei"</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #0f141c<span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>    #212943 0.6000000000000001px<span class="token punctuation">,</span>    #0f141c 0.6000000000000001px  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> 12px 12px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#app</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">place-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">button</span> <span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>    90deg<span class="token punctuation">,</span>    <span class="token function">hsl</span><span class="token punctuation">(</span>240deg<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">hsl</span><span class="token punctuation">(</span>280deg<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 12px 18px<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token comment">/* border: 1px solid hsl(280deg, 100%, 50%); */</span><span class="token punctuation">&#125;</span><span class="token comment">/*注意此处布局*/</span><span class="token selector">#messages</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column-reverse<span class="token punctuation">;</span>  <span class="token property">gap</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 此处改为#messages --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#messages<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alertBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>closeIcon<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>消息提示框组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Teleport</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//可添加计时器，3s后关闭提示框</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.alertBox</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 350px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">hsl</span><span class="token punctuation">(</span>280<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>  <span class="token comment">/* position: absolute;  right: 12px;  bottom: 12px; */</span>  <span class="token comment">/*改为相对定位，因为关闭按钮在其中*/</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.closeIcon</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> 900<span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mixins："><a href="#Mixins：" class="headerlink" title="Mixins："></a>Mixins：</h3><h4 id="组件配置的复用："><a href="#组件配置的复用：" class="headerlink" title="组件配置的复用："></a>组件配置的复用：</h4><blockquote><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。（现在不推荐使用此种方法进行组件复用）</p></blockquote><p>例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义一个混入对象</span><span class="token keyword">var</span> myMixin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello from mixin!'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个使用混入对象的组件</span><span class="token keyword">var</span> Component <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">var</span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// => "hello from mixin!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="共同属性的覆盖与合并："><a href="#共同属性的覆盖与合并：" class="headerlink" title="共同属性的覆盖与合并："></a>共同属性的覆盖与合并：</h4><ul><li><code>data</code>函数：Mixins中的<code>data</code>属性会与组件中的data属性进行<strong>合并</strong>，<strong>如果有同名的属性，组件自身的属性会覆盖Mixins中的属性</strong>。</li><li><code>computed</code>，<code>methods</code>，<code>components</code>，<code>props</code>等这些值为数组或对象，同data函数中的合并覆盖规则。</li><li>如果是<strong>生命周期钩子</strong>，Mixins和组件中的<strong>都会执行</strong>，<strong>Mixins中的先执行</strong>，<strong>组件中的后执行</strong>。</li></ul><h4 id="全局注册："><a href="#全局注册：" class="headerlink" title="全局注册："></a>全局注册：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> PaginationMixin <span class="token keyword">from</span> <span class="token string">"./mixins/PaginationMixin"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>PaginationMixin<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">siteTitle</span><span class="token operator">:</span> <span class="token string">"我的 Vue 应用"</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">siteTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>siteTitle<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>        &#123;&#123; siteTitle &#125;&#125;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PaginationComponent</span>        <span class="token attr-name">:totalPage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>totalPage<span class="token punctuation">"</span></span>        <span class="token attr-name">:defaultCurrentPage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentPage<span class="token punctuation">"</span></span>      <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PaginationComponent2</span>        <span class="token attr-name">:totalPage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>totalPage<span class="token punctuation">"</span></span>        <span class="token attr-name">:defaultCurrentPage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentPage<span class="token punctuation">"</span></span>      <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BaseButton</span> <span class="token attr-name">:defaultCurrentPage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentPage<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> BaseButton <span class="token keyword">from</span> <span class="token string">"./components/BaseButton.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> PaginationComponent <span class="token keyword">from</span> <span class="token string">"./components/PaginationComponent.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> PaginationComponent2 <span class="token keyword">from</span> <span class="token string">"./components/PaginationComponent2.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">siteTitle</span><span class="token operator">:</span> <span class="token string">"Mixin 全局注册"</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    PaginationComponent<span class="token punctuation">,</span>    PaginationComponent2<span class="token punctuation">,</span>    BaseButton<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">totalPage</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>      <span class="token literal-property property">currentPage</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Mixins也存在局限性，例如命名易冲突，各代码之间的逻辑功能也不能复用。</p></blockquote><h3 id="异步组件加载："><a href="#异步组件加载：" class="headerlink" title="异步组件加载："></a>异步组件加载：</h3><p>对于大型项目，一次性加载所有组件会影响页面的首次打开速度。正确方法应该是根据用户的操作与导航，加载相应的组件。</p><blockquote><p><code>defineAsyncComponent</code>：接收一个回调函数作为参数，可用于异步加载组件。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineAsyncComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProductPage <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/ProductPage.vue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件错误处理："><a href="#组件错误处理：" class="headerlink" title="组件错误处理："></a>组件错误处理：</h3><h4 id="全局错误处理："><a href="#全局错误处理：" class="headerlink" title="全局错误处理："></a>全局错误处理：</h4><p><code>errorHandler</code>：</p><ul><li><p><strong>类型</strong>：<code>Function</code></p></li><li><p><strong>默认值</strong>：<code>undefined</code></p></li><li><p><strong>用法</strong>：</p><pre class="line-numbers language-none"><code class="language-none">Vue.config.errorHandler &#x3D; function (err, vm, info) &#123;  &#x2F;&#x2F; handle error  &#x2F;&#x2F; &#96;info&#96; 是 Vue 特定的错误信息，比如错误所在的生命周期钩子  &#x2F;&#x2F; 只在 2.2.0+ 可用&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。</p><blockquote><p>从 2.2.0 起，这个钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 <code>undefined</code> 时，被捕获的错误会通过 <code>console.error</code> 输出而避免应用崩溃。</p></blockquote><blockquote><p>从 2.4.0 起，这个钩子也会捕获 Vue 自定义事件处理函数内部的错误了。</p></blockquote><blockquote><p>从 2.6.0 起，这个钩子也会捕获 <code>v-on</code> DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理。</p></blockquote><blockquote><p>错误追踪服务 <a href="https://sentry.io/">Sentry</a> 和 <a href="https://docs.bugsnag.com/platforms/browsers/vue/">Bugsnag</a> 都通过此选项提供了官方支持。</p></blockquote></li></ul><p>示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="错误边界："><a href="#错误边界：" class="headerlink" title="错误边界："></a>错误边界：</h4><blockquote><p>如果某个Vue组件提供了错误处理能力，那么它就被称为错误边界。Vue组件会以事件冒泡方式向父组件传递错误信息，只有当父组件处理了错误并手动停止了错误的传播，错误才不会继续向上传递，这样这个子组件所有的子组件发生的错误都会交给他进行处理。</p></blockquote><p>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>啊哦，我是错误的顶级组件了！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- &lt;AppList v-else :data="data" /> --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppList</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppButton</span><span class="token punctuation">></span></span>测试按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AppButton</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> AppList <span class="token keyword">from</span> <span class="token string">"./components/AppList.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> AppButton <span class="token keyword">from</span> <span class="token string">"./components/AppButton.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    AppList<span class="token punctuation">,</span>    AppButton<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">errorCaptured</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 停止错误向上传播</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费利用云资源训练模型教程</title>
      <link href="/2022/07/26/mian-fei-li-yong-yun-zi-yuan-xun-lian-mo-xing-jiao-cheng/"/>
      <url>/2022/07/26/mian-fei-li-yong-yun-zi-yuan-xun-lian-mo-xing-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="谷歌在线训练模型的流程："><a href="#谷歌在线训练模型的流程：" class="headerlink" title="谷歌在线训练模型的流程："></a>谷歌在线训练模型的流程：</h3><blockquote><p>如果本地训练模型，会长时间占用自己显卡的显存，而且显卡的显存大小很大程度上影响训练的时间，谷歌提供免费的云端GPU，有足足16G的显存可以用来训练数据集。</p><p>由于是免费资源，所以训练的持续时间不能太长从而占用公共资源，如果是需要训练几天的大型数据，本教程不再适用。</p></blockquote><h4 id="1-注册Google-Drive云盘"><a href="#1-注册Google-Drive云盘" class="headerlink" title="1.注册Google Drive云盘"></a>1.注册Google Drive云盘</h4><blockquote><p>目的是为了之后将云盘中的文件挂载到Colaboratory上，防止文件丢失。</p><p>官网地址：<a href="https://drive.google.com/">https://drive.google.com</a></p></blockquote><p>新建一个文件夹，将训练所需的准备文件放置在此文件夹中。</p><p><img src="/2022/07/26/mian-fei-li-yong-yun-zi-yuan-xun-lian-mo-xing-jiao-cheng/image-20220726103637723.png" alt="image-20220726103637723"></p><h4 id="2-从云盘连接到Colaboratory"><a href="#2-从云盘连接到Colaboratory" class="headerlink" title="2.从云盘连接到Colaboratory"></a>2.从云盘连接到Colaboratory</h4><p>点击右上角新建一个Google Colaboratory，如果没有该选项，则需要点击<strong>连接更多应用程式</strong>进行安装：</p><img src="image-20220726104004419.png" alt="image-20220726104004419" style="zoom:50%;" /><p>创建好后，进入下面的页面：</p><p><img src="/2022/07/26/mian-fei-li-yong-yun-zi-yuan-xun-lian-mo-xing-jiao-cheng/image-20220726104147163.png" alt="image-20220726104147163"></p><p>默认是使用CPU的资源，需要更改为使用GPU的资源。点击菜单栏中的<strong>修改</strong>按钮，再点击<strong>笔记本设置</strong>，更改为使用GPU资源：</p><img src="image-20220726104256034.png" alt="image-20220726104256034" style="zoom:50%;" /><p>点击右上角<strong>连接</strong>按钮，选择<strong>连接到托管代码执行程序</strong>，这样就连接上云盘了：</p><p><img src="/2022/07/26/mian-fei-li-yong-yun-zi-yuan-xun-lian-mo-xing-jiao-cheng/image-20220726104410455.png" alt="image-20220726104410455"></p><h4 id="3-准备工作："><a href="#3-准备工作：" class="headerlink" title="3.准备工作："></a>3.准备工作：</h4><p>查看当前GPU情况，16G的显存，已经算很好的配置了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span>nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/26/mian-fei-li-yong-yun-zi-yuan-xun-lian-mo-xing-jiao-cheng/image-20220526204800113.png" alt="image-20220526204800113"></p><p>脚本定义挂载网盘并执行代码，需要点击链接输入验证码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> google<span class="token punctuation">.</span>colab <span class="token keyword">import</span> drivedrive<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'/content/drive'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/07/26/mian-fei-li-yong-yun-zi-yuan-xun-lian-mo-xing-jiao-cheng/image-20220726110413026.png" alt="image-20220726110413026"></p><p>进入到挂载的文件夹中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%cd /content/drive <span class="token comment"># /content/drive</span>%cd My<span class="token punctuation">\</span> Drive/colab <span class="token comment"># /content/drive/My Drive/colab</span><span class="token operator">!</span>git clone https://github.com/ultralytics/yolov5.git <span class="token comment"># 克隆yolov5的代码到文件夹中</span>%cd yolov5/ <span class="token comment"># /content/drive/MyDrive/colab/yolov5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>回到Dirve云盘中，此时文件夹结构应该如下图，一个是yolov5官方的文件夹，一个是自己的数据集文件夹：</p><p><img src="/2022/07/26/mian-fei-li-yong-yun-zi-yuan-xun-lian-mo-xing-jiao-cheng/image-20220726110943526.png" alt="image-20220726110943526"></p><p>开始训练前，还需要修改下yolov5的文件。找到yolov5文件夹中的models文件夹，根据所需打开.yaml文件，这里以yolov5s.yaml为例：</p><p><img src="/2022/07/26/mian-fei-li-yong-yun-zi-yuan-xun-lian-mo-xing-jiao-cheng/image-20220726111130283.png" alt="image-20220726111130283"></p><p>修改其中的nc值，根据你自己数据集所需进行修改，修改完后点击右上角的<strong>Save to Drive</strong>按钮：</p><p><img src="/2022/07/26/mian-fei-li-yong-yun-zi-yuan-xun-lian-mo-xing-jiao-cheng/image-20220726111403630.png" alt="image-20220726111403630"></p><h4 id="4-开始训练："><a href="#4-开始训练：" class="headerlink" title="4.开始训练："></a>4.开始训练：</h4><p>进入yolov5文件夹：</p><pre class="line-numbers language-none"><code class="language-none">%cd yolov5&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 执行训练命令，注意自己的训练集位置输入是否正确：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span>python train.py --data <span class="token punctuation">..</span>/Lion/data.yaml --cfg models/yolov5s.yaml --weights <span class="token string">''</span> --batch-size <span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/26/mian-fei-li-yong-yun-zi-yuan-xun-lian-mo-xing-jiao-cheng/image-20220526205304830.png" alt="image-20220526205304830"></p><p>训练结束后，将训练好的权重中最好的权重best.pt下载到本地，其余检测操作同本地检测图片操作相同。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全速下载百度网盘的教程</title>
      <link href="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/"/>
      <url>/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载Microsoft-Edge浏览器"><a href="#1-下载Microsoft-Edge浏览器" class="headerlink" title="1.下载Microsoft  Edge浏览器"></a>1.下载Microsoft  Edge浏览器</h3><h3 id="2-添加油猴插件："><a href="#2-添加油猴插件：" class="headerlink" title="2.添加油猴插件："></a>2.添加油猴插件：</h3><p>点开浏览器右上角三个点，点击<strong>拓展</strong>选项，再点击<strong>管理扩展</strong>选项：</p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722112815950.png" alt="image-20220722112815950"></p><p>点击<strong>获取 Microsoft Edage 扩展</strong>，在商店中搜索<strong>Tampermonkey</strong>，下载绿色的：</p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722113257104.png" alt="image-20220722113257104"></p><h3 id="3-添加百度网盘直链下载助手："><a href="#3-添加百度网盘直链下载助手：" class="headerlink" title="3.添加百度网盘直链下载助手："></a>3.添加百度网盘直链下载助手：</h3><p>点开浏览器右上角的扩展选项，点击<strong>Tampermonkey</strong>，选择<strong>获取新脚本</strong>：</p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722113540704.png" alt="image-20220722113540704"></p><p>搜索用户脚本，<strong>百度网盘简易下载助手（直链下载复活版）</strong></p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722113712560.png" alt="image-20220722113712560"></p><p>最好是访问<a href="https://greasyfork.org/zh-CN/scripts/418182-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%AE%80%E6%98%93%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%A4%8D%E6%B4%BB%E7%89%88">百度网盘简易下载助手（直链下载复活版） (greasyfork.org)</a>，只要跳转到这个界面就算成功，注意版本是1.5.5，然后安装此脚本：</p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722114026073.png" alt="image-20220722114026073"></p><h3 id="4-安装Aria2："><a href="#4-安装Aria2：" class="headerlink" title="4.安装Aria2："></a>4.安装Aria2：</h3><p>在上个页面往下拉，下载Aria2：</p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722114202084.png" alt="image-20220722114202084"></p><h3 id="5-如何全速下载："><a href="#5-如何全速下载：" class="headerlink" title="5.如何全速下载："></a>5.如何全速下载：</h3><p>进入下载好的Aria2文件夹，双击打开<strong>aria2.exe</strong>文件，<strong>保持在后台运行</strong>；如果你需要查看下载页面，在打开aria2.exe后，再点击AriaNg启动器.exe文件，跳转到浏览器查看下载进度：</p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722114825906.png" alt="image-20220722114825906"></p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722114908574.png" alt="image-20220722114908574"></p><p>点击要下载资源的百度网盘链接，<strong>将其保存到自己网盘后</strong>，<strong>在网页端进入自己的网盘</strong>：</p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722114544931.png" alt="image-20220722114544931"></p><p>右上角会出现<strong>简易下载助手</strong>，选择你要下载的资源，点击简易下载助手：</p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722114939150.png" alt="image-20220722114939150"></p><p>点击<strong>点击获取直链地址</strong>，关注公众号获取验证码：</p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722115036698.png" alt="image-20220722115036698"></p><p>获取后，<strong>修改保存路径</strong>，点击<strong>发送至Aria2</strong>按钮：</p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722115535291.png" alt="image-20220722115535291"></p><p>回到Aria或者回到AriaNg启动器.exe打开的浏览器页面，就能看到下载进度：</p><p><img src="/2022/07/22/quan-su-xia-zai-bai-du-wang-pan-de-jiao-cheng/image-20220722120052380.png" alt="image-20220722120052380"></p><p>速度非常快，和你的网速一致，全速下载！</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机图形学入门--光</title>
      <link href="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/"/>
      <url>/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/</url>
      
        <content type="html"><![CDATA[<h3 id="WebGL入门："><a href="#WebGL入门：" class="headerlink" title="WebGL入门："></a>WebGL入门：</h3><h3 id="1-画布："><a href="#1-画布：" class="headerlink" title="1.画布："></a>1.画布：</h3><h4 id="1-坐标系："><a href="#1-坐标系：" class="headerlink" title="1.坐标系："></a>1.坐标系：</h4><p>对于大多数计算机屏幕，坐标原点位于屏幕左上角，x轴向右侧延伸，y轴向左侧延伸：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620143143556.png" alt="image-20220620143143556"></p><p>但对于3D图形程序员来说，更倾向使用另一种坐标系：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620143216979.png" alt="image-20220620143216979"></p><h4 id="2-颜色模型："><a href="#2-颜色模型：" class="headerlink" title="2.颜色模型："></a>2.颜色模型：</h4><h5 id="1-减法色模型："><a href="#1-减法色模型：" class="headerlink" title="1.减法色模型："></a>1.减法色模型：</h5><p>从包含所有波长的光开始，减去一部分数量的颜色，从而创建任何其他颜色：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620143348156.png" alt="image-20220620143348156"></p><p>但这种模型不完全正确，实际原色是青色、平红色和黄色。而且混合这三种模型会产生一种稍暗的颜色，但不是纯黑色，因此需要添加黑色作为第四种“原色”，黑色用K表示，因此我们得出CMYK模型，如下图：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620143819653.png" alt="image-20220620143819653"></p><h5 id="2-加法色模型："><a href="#2-加法色模型：" class="headerlink" title="2.加法色模型："></a>2.加法色模型：</h5><p>屏幕与纸张相反，屏幕本身是黑色的，还会发出光，因此我们从没有光开始，然后添加我们想要的波长的光。大多数颜色可以通过在黑色表面添加不同“数量”的红色、绿色、蓝色来创建，这就是RGB颜色模型，是一种加法色模型，如图所示：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620143826817.png" alt="image-20220620143826817"></p><h4 id="3-颜色深度："><a href="#3-颜色深度：" class="headerlink" title="3.颜色深度："></a>3.颜色深度：</h4><p>大多数图像都是使用8位二进制数来表示一种原色，这里称原色为颜色通道，每个通道使用8位二进制的话，一个像素由三个通道组成就是24位二进制数，共有2^24种不同颜色，这种格式成为R8G8B8格式，是常用格式，颜色深度认为是24位。</p><h4 id="4-颜色表示："><a href="#4-颜色表示：" class="headerlink" title="4.颜色表示："></a>4.颜色表示：</h4><p>使用三个字节来表示一种颜色，每个字节保存从0到255的8位颜色通道的值，我们将颜色表示为(R,G,B)。</p><h4 id="5-颜色的处理方式："><a href="#5-颜色的处理方式：" class="headerlink" title="5.颜色的处理方式："></a>5.颜色的处理方式：</h4><p>我们可以通过将每个颜色通道值乘一个常量来修改颜色的强度，可以通过将每个颜色通道值分别相加来将两个颜色相加。这些运算可能产生无效值，我们将<strong>任何超过255的值视为255，任何低于0的值视为0</strong>，我们把这称为将值范围限制[0,255]，类似生活中使用相机曝光不足或过度曝光的情况。</p><h4 id="6-场景："><a href="#6-场景：" class="headerlink" title="6.场景："></a>6.场景：</h4><p>场景需要坐标轴来讨论其中的为题，不能使用与画布相同的坐标系，因为画布为2D，场景是3D，如图是场景使用的坐标系：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620144636553.png" alt="image-20220620144636553"></p><p>场景的单位取决于我们的场景代表什么，不同场景单位不同。</p><h3 id="2-基础光线追踪知识："><a href="#2-基础光线追踪知识：" class="headerlink" title="2.基础光线追踪知识："></a>2.基础光线追踪知识：</h3><h4 id="1-渲染图片："><a href="#1-渲染图片：" class="headerlink" title="1.渲染图片："></a>1.渲染图片：</h4><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620152206227.png" alt="image-20220620152206227"></p><p>如何让计算机渲染这张图片？我们用一个固定的视角和一个窗口来观察风景，将图像分成很多“格子”，在每一个格子涂上相应的颜色，最终绘制的图像如图：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620152351610.png" alt="image-20220620152351610"></p><p>绘画过程可以是这样的：</p><ul><li>将眼睛和框架搭建好</li><li>扫描画布上每一个区域</li><li>对应画布和图像上的区域</li><li>识别图像上每一个区域所看到的的颜色</li><li>将每个区域的颜色画出来</li></ul><h4 id="2-基本假设："><a href="#2-基本假设：" class="headerlink" title="2.基本假设："></a>2.基本假设：</h4><p>首先我们需要一个固定的观察位置，也就是相机位置，用O表示，假设相机位置O&#x3D;(0,0,0)；假设有一个固定的相机方位，相机方位决定了相机指向哪里，我们假设相机指向z轴正方向，并且y轴正方向是向上的，x轴正方向是向右的，如图所示：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620153152123.png" alt="image-20220620153152123"></p><p>再假设一个“窗口”，假设位于相机正前方，垂直于z轴，中心在z轴上，平行于x轴与y轴，如图所示：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620153300698.png" alt="image-20220620153300698"></p><p>图中的矩形作为我们观察世界的窗口，我们称之为视口。本质上，我们将在画布上绘制我们通过视口看到的任何内容。注意视口大小和视口到相机距离决定了从相机可以观察的角度，称为<strong>视野</strong>。</p><h4 id="3-画布空间到视口空间："><a href="#3-画布空间到视口空间：" class="headerlink" title="3.画布空间到视口空间："></a>3.画布空间到视口空间：</h4><p>视口是以世界空间的单位衡量的，而画布是以像素衡量的，所以从画布到空间坐标<strong>只是比例的改变</strong>。</p><h4 id="4-追踪光线："><a href="#4-追踪光线：" class="headerlink" title="4.追踪光线："></a>4.追踪光线：</h4><blockquote><p>现实世界中，光线是经过反射后到我们的眼睛中，我们可以尝试模拟场景光源中光子离开光源的路径，但这非常耗时，而且光子数量惊人，并且只有一小部分光子在通过视口后会刚好到达。这种技术称为光子追踪或光子映射。</p></blockquote><p>相反我们考虑，反向光线：从相机发出射线，穿过视口中的某个点，并跟踪射线的路径，直到他“击中”场景中的某个物体，这个物体就是相机通过视口那个点看到的物体。因此我们只需将<strong>该物体的颜色</strong>作为“通过该点的光的颜色”，如图所示：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620155153656.png" alt="image-20220620155153656"></p><h3 id="3-光："><a href="#3-光：" class="headerlink" title="3.光："></a>3.光：</h3><p>将介绍3种类型的光源，点光，方向光和环境光。</p><h4 id="1-简单假设："><a href="#1-简单假设：" class="headerlink" title="1.简单假设："></a>1.简单假设：</h4><p>用单个实数i来表征任何光，i源于光的强度，使用白光从而保证事情简单。其次将忽视空气，因为在现实生活中，光源离得越远，看起来就越暗，因为空气中漂浮的粒子会在光线穿过它们时吸收部分光。</p><h3 id="2-光源："><a href="#2-光源：" class="headerlink" title="2.光源："></a>2.光源：</h3><h5 id="1-点光："><a href="#1-点光：" class="headerlink" title="1.点光："></a>1.点光：</h5><p>从3D空间中的一个固定的点发射光，这个点被称为点光源的位置，点光源向每个方向均匀的发射光，这就是它被称为全向光的原因。因此，点光可以完全用位置和强度来描述。</p><p>定义向量L作为从场景中的点P到光源Q的方向，我们可以计算这个向量，称其为光向量，即Q-P。需要注意，Q是固定的，P可以是场景中的任何点，因此L对于场景中的每个点都是不同的，如图所示：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620162555479.png" alt="image-20220620162555479"></p><h5 id="2-方向光："><a href="#2-方向光：" class="headerlink" title="2.方向光："></a>2.方向光：</h5><p>和点光一样，方向光也有强度，但没有位置，相反它有一个固定的方向。在方向光的情况下，L是给定的，如图所示：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620163037954.png" alt="image-20220620163037954"></p><h5 id="3-环境光："><a href="#3-环境光：" class="headerlink" title="3.环境光："></a>3.环境光：</h5><p>不希望每个物体被直接照亮或者完全黑暗，为了突破这一限制，定义第三种光源，称之为环境光。它只以其强度为特征。我们将声明环境光为场景中的每个点贡献一些光，不管它在哪里。</p><p>一般来说，一个场景会有单个环境光（因为环境光只有一个强度值，任何数量的环境光都可以简单地组合成一个环境光）和任何数量的点光及方向光。</p><h5 id="4-单点光照："><a href="#4-单点光照：" class="headerlink" title="4.单点光照："></a>4.单点光照：</h5><p>为了计算单个点的光照，我们将计算每个光源奉献的光，并将它们加在一起，得到一个代表该点接收到的光的总量的数字。然后我们可以用这个总量乘物体表面在该点的颜色，从而获得该点的着色颜色，用以代表该点接收了多少光。</p><p>我们可以根据物体反射的方式直观地将物体分为两大类：“哑光“和”闪光“物体。</p><h5 id="5-漫反射："><a href="#5-漫反射：" class="headerlink" title="5.漫反射："></a>5.漫反射：</h5><p>当一束光线照射到一个哑光物体上时，光线会沿着每个方向均匀地散射回场景中，这个过程叫做漫反射，这是使哑光物体看起来无光泽的原因。另一方面，反射的光的数量取决于光线和物体表面之间的角度，这是因为光线所携带的能量必须根据角度分散在更小或更大的区域上，所以单位面积上反射到场景的能量分别更高或更低，如图所示：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620164823915.png" alt="image-20220620164823915"></p><h5 id="6-镜面反射："><a href="#6-镜面反射：" class="headerlink" title="6.镜面反射："></a>6.镜面反射：</h5><p>与哑光物体不同，感知这些闪亮物体表面的方式实际上取决于你的视角。不规则物体表面是这样反射的：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620165117294.png" alt="image-20220620165117294"></p><p>但如果表面是相对光滑的呢？如图所示：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620165209598.png" alt="image-20220620165209598"></p><p>注意在计算机图形学中，除非特殊说明，光源方向都是从场景中任意一点指向光源的方向，与物理中入射光的方向相反，是为了方便后续光照模型中的计算。</p><p>但并非每一个物体是完全光滑的，所以总有一部分光线会沿着接近R的方向被反射，越是接近R，该方向反射的光线越多，物体的光泽度决定反射光线衰减的程度：</p><p><img src="/2022/07/20/ji-suan-ji-tu-xing-xue-ru-men-guang/image-20220620165525865.png" alt="image-20220620165525865"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端必看的书籍【进阶】</title>
      <link href="/2022/07/19/qian-duan-bi-kan-de-shu-ji-jin-jie/"/>
      <url>/2022/07/19/qian-duan-bi-kan-de-shu-ji-jin-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="1-白银前端："><a href="#1-白银前端：" class="headerlink" title="1.白银前端："></a>1.白银前端：</h3><blockquote><p>可以熟练的进行平时的业务开发，但是对于JS高阶，源码，浏览器原理，数据结构与算法，设计模式，网络，前端工程之类的东西很迷茫，只知道大致概念。</p></blockquote><ul><li><p>《剖析Vue.js内部运行机制》，对于Vue内部的基础原理的理解，适合新手初次接触Vue。</p><p><img src="/2022/07/19/qian-duan-bi-kan-de-shu-ji-jin-jie/160fdc404b36a1a0_tplv-t2oaga2asx-zoom-1.webp" alt="img"></p></li><li><p>《深入浅出Vue.js》，从原生demo一步步转换成框架的样子，循序渐进。</p><p><img src="/2022/07/19/qian-duan-bi-kan-de-shu-ji-jin-jie/s31471882.webp" alt="img"></p></li><li><p><a href="https://ustbhuangyi.github.io/vue-analysis/"> Vue.js 技术揭秘 (ustbhuangyi.github.io)</a>，源码解析，更进一步的对于源码的理解。</p></li><li><p><a href="https://github.com/HcySunYang/vue-design/tree/elegant">Vue全面解析</a>，非常详细，逐行分析源码。</p></li><li><p>《图解http》，比较入门，满足日常基本使用。</p><p><img src="/2022/07/19/qian-duan-bi-kan-de-shu-ji-jin-jie/s27283822.webp" alt="img"></p></li><li><p>《图解TCP&#x2F;IP》，入门级别，同上一起使用。</p><p><img src="/2022/07/19/qian-duan-bi-kan-de-shu-ji-jin-jie/s26676928.webp" alt="img"></p></li><li><p>《TCP&#x2F;IP详解 卷1》，非常详细和深入地讲解tcp和ip协议。</p><p><img src="/2022/07/19/qian-duan-bi-kan-de-shu-ji-jin-jie/s28845534.webp" alt="img"></p></li></ul><h3 id="2-黄金前端："><a href="#2-黄金前端：" class="headerlink" title="2.黄金前端："></a>2.黄金前端：</h3><blockquote><p>有需要对大型项目的架构的把控，项目管理，资源分配能力的需求，专注于整体的把握，不再拘泥于具体技术。</p></blockquote><ul><li><p>《JavaScript设计模式与开发实践》</p><p><img src="/2022/07/19/qian-duan-bi-kan-de-shu-ji-jin-jie/s28065006.webp" alt="img"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Node.js实现图像识别接口调用</title>
      <link href="/2022/07/16/ji-yu-node-js-shi-xian-tu-xiang-shi-bie-jie-kou-diao-yong/"/>
      <url>/2022/07/16/ji-yu-node-js-shi-xian-tu-xiang-shi-bie-jie-kou-diao-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="1-比较各类商业图像识别接口："><a href="#1-比较各类商业图像识别接口：" class="headerlink" title="1.比较各类商业图像识别接口："></a>1.比较各类商业图像识别接口：</h3><p>1.火山引擎：对于人体、人像的识别功能较多，对于动物几乎没有，分类较少只有两三个，而且识别精度较差，往往识别不出图像中的实体。</p><p>2.谷歌引擎：识别精度、细节相当高，但没有分类，识别元素过多，且在国外，调试和支付不太方便。</p><p>3.百度引擎：识别精度优秀，分类较多，有明确的动物识别分类，且能衍生出百科知识，返回的标签为中文标签。</p><p>4.阿里云引擎：识别分类没有动物分类，但是在阿里云市场有其他公司的接口，相当于外包。</p><h3 id="2-选用接口："><a href="#2-选用接口：" class="headerlink" title="2.选用接口："></a>2.选用接口：</h3><p>综合考虑使用百度动物识别，使用语言为node.js。但其官方示例没有node.js的语言示例，需要自己琢磨开发。</p><h4 id="1-调用百度获取token的接口："><a href="#1-调用百度获取token的接口：" class="headerlink" title="1.调用百度获取token的接口："></a>1.调用百度获取token的接口：</h4><p>一开始的想法是将这个过程作为中间件，但发现作为中间件使用后，原接口就不能再发起请求了，原因不得而知，只能将其封装在方法中：</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">async function getToken() &#123;  const param &#x3D; qs.stringify(&#123;    grant_type: &quot;client_credentials&quot;,    client_id: &quot;your client_id&quot;,    client_secret: &quot;your client_secret&quot;,  &#125;);  &#x2F;&#x2F;通过秘钥获取token相关属性  try &#123;    &#x2F;&#x2F;但这个方法需要考虑到异步问题    &#x2F;&#x2F; axios(&#123;    &#x2F;&#x2F;   method: &quot;get&quot;,    &#x2F;&#x2F;   baseURL: &quot;https:&#x2F;&#x2F;aip.baidubce.com&#x2F;&quot;,    &#x2F;&#x2F;   &#x2F;&#x2F;两种url写法均可以请求到    &#x2F;&#x2F;   &#x2F;&#x2F; url: &#96;oauth&#x2F;2.0&#x2F;token?grant_type&#x3D;client_credentials&amp;client_id&#x3D;$&#123;client_id&#125;&amp;client_secret&#x3D;$&#123;client_secret&#125;&#96;,    &#x2F;&#x2F;   url: &quot;oauth&#x2F;2.0&#x2F;token?&quot; + param,    &#x2F;&#x2F; &#125;).then((res) &#x3D;&gt; &#123;    &#x2F;&#x2F;   &#x2F;&#x2F; var stream &#x3D; res.data.pipe(fs.createWriteStream(&quot;.&#x2F;baidu-token.json&quot;));    &#x2F;&#x2F;   &#x2F;&#x2F; stream.on(&quot;finish&quot;, () &#x3D;&gt; &#123;    &#x2F;&#x2F;   &#x2F;&#x2F;   console.log(&quot;传输完成！&quot;);    &#x2F;&#x2F;   &#x2F;&#x2F; &#125;);    &#x2F;&#x2F;   return axios.get(&quot;https:&#x2F;&#x2F;aip.baidubce.com&#x2F;oauth&#x2F;2.0&#x2F;token?&quot; + param);    &#x2F;&#x2F; &#125;);    return axios.get(&quot;https:&#x2F;&#x2F;aip.baidubce.com&#x2F;oauth&#x2F;2.0&#x2F;token?&quot; + param);  &#125; catch (error) &#123;    console.log(error);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之前考虑过将获取到的token存放在文件中，这样不太会占用内存，但使用fs.createWriteStream(“.&#x2F;baidu-token.json”)浏览器会报同源跨域错误，虽然没什么影响，但如果不想看见报错还是不要使用这种优雅的写法了。</p><h4 id="2-将图像转换为base64格式："><a href="#2-将图像转换为base64格式：" class="headerlink" title="2.将图像转换为base64格式："></a>2.将图像转换为base64格式：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> image2base64 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"image-to-base64"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> imageBase64 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">image2base64</span><span class="token punctuation">(</span>      <span class="token comment">// "http://localhost:4000/" + req.file.filename</span>      imageUrl    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里的imageUrl直接使用的是阿里云存储OSS返回的url，比较方便</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-调用动物识别接口："><a href="#3-调用动物识别接口：" class="headerlink" title="3.调用动物识别接口："></a>3.调用动物识别接口：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAnimal</span><span class="token punctuation">(</span><span class="token parameter">imageUrl<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> imageBase64 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">image2base64</span><span class="token punctuation">(</span>      <span class="token comment">// "http://localhost:4000/" + req.file.filename</span>      imageUrl    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> bodyFormData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bodyFormData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> imageBase64<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://aip.baidubce.com/rest/2.0/image-classify/v1/animal?access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>token<span class="token punctuation">.</span>data<span class="token punctuation">.</span>access_token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> bodyFormData<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里一定要将imageBase64添加到bodyFormData，官方文档中没有说，是一个坑。</p><h3 id="3-识别结果："><a href="#3-识别结果：" class="headerlink" title="3.识别结果："></a>3.识别结果：</h3><p><img src="/2022/07/16/ji-yu-node-js-shi-xian-tu-xiang-shi-bie-jie-kou-diao-yong/image-20220716192722021.png" alt="image-20220716192722021"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 图像识别 </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端必看的书籍【入门】</title>
      <link href="/2022/07/16/qian-duan-bi-kan-de-shu-ji-ru-men/"/>
      <url>/2022/07/16/qian-duan-bi-kan-de-shu-ji-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="1-黑铁前端："><a href="#1-黑铁前端：" class="headerlink" title="1.黑铁前端："></a>1.黑铁前端：</h3><blockquote><p>没有接触过前端，对于前端没有概念。</p></blockquote><p>推荐书籍：</p><ul><li><p>《Head First HTML与CSS（第2版）》，看完会对html和css有基本概念。</p><p><img src="/2022/07/16/qian-duan-bi-kan-de-shu-ji-ru-men/image-20220716182659269.png" alt="image-20220716182659269"></p></li><li><p>《JavaScript DOM编程艺术》，最好的JS入门书籍，其中还介绍了最符合标准的编程理念。</p><p><img src="/2022/07/16/qian-duan-bi-kan-de-shu-ji-ru-men/image-20220716182900459.png" alt="image-20220716182900459"></p></li><li><p>《JavaScript高级程序设计（第4版）》，带你入门基础的JavaScript语法，DOM环境和事件，本地存储和跨域等等，是一本非常全面的书籍。</p><p><img src="/2022/07/16/qian-duan-bi-kan-de-shu-ji-ru-men/image-20220716183058434.png" alt="image-20220716183058434"></p></li></ul><h3 id="2-青铜前端："><a href="#2-青铜前端：" class="headerlink" title="2.青铜前端："></a>2.青铜前端：</h3><blockquote><p>可以使用html，css，JavaScript编写简单的页面，但还不会使用库。</p></blockquote><ul><li><p>《JavaScript高级程序设计（第4版）》，没错，继续攻读一遍，会有新的收获。</p></li><li><p>Vue，这时候可以尝试接触库和框架了，直接看官方文档，养成看官方文档的好习惯。</p></li><li><p>《ES6标准入门 第3版 》，了解ES6用法基础。</p><p><img src="/2022/07/16/qian-duan-bi-kan-de-shu-ji-ru-men/image-20220716183639881.png" alt="image-20220716183639881"></p></li></ul><h3 id="3-白银前端："><a href="#3-白银前端：" class="headerlink" title="3.白银前端："></a>3.白银前端：</h3><blockquote><p>会使用库，例如可以用vue，jquery完成普通业务的开发，比如说一些活动落地页和后台管理页面</p></blockquote><ul><li><p>《JavaScript高级程序设计（第4版）》，没错，再看一遍会有新的成长。</p></li><li><p>《正则表达式必知必会(修订版)》，书很薄，但是正则表达式是前端开发者必须要会的一项技能。</p><p><img src="/2022/07/16/qian-duan-bi-kan-de-shu-ji-ru-men/image-20220716183927650.png" alt="image-20220716183927650"></p></li><li><p>《你不知道的JavaScript 上卷》，内容为作用域和闭包以及对象原型，很重要。</p><p><img src="/2022/07/16/qian-duan-bi-kan-de-shu-ji-ru-men/image-20220716184057259.png" alt="image-20220716184057259"></p></li><li><p>《你不知道的JavaScript 中卷》，内容为类型、语法、异步和性能。异步推荐看《ES6标准入门》，性能部分不推荐看</p><p><img src="/2022/07/16/qian-duan-bi-kan-de-shu-ji-ru-men/image-20220716184230506.png" alt="image-20220716184230506"></p></li><li><p>《你不知道的JavaScript 下卷》，内容为JavaScript入门知识和未来发展趋势的展望，对前两本书的总结，ES6部分不推荐看。</p><p><img src="/2022/07/16/qian-duan-bi-kan-de-shu-ji-ru-men/image-20220716184550929.png" alt="image-20220716184550929"></p><ul><li><p>《深入理解ES6》，在了解ES6基础上的一本进阶书籍。</p><p><img src="/2022/07/16/qian-duan-bi-kan-de-shu-ji-ru-men/image-20220716184902235.png" alt="image-20220716184902235"></p></li></ul></li><li><p>《JavaScript 忍者秘籍》，很有深度的一本书，对于JS的核心部分剖析的很详细。</p><p><img src="/2022/07/16/qian-duan-bi-kan-de-shu-ji-ru-men/image-20220716185140322.png" alt="image-20220716185140322"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最简单的提升网站的性能的方法</title>
      <link href="/2022/07/15/zui-jian-dan-de-ti-sheng-wang-zhan-de-xing-neng-de-fang-fa/"/>
      <url>/2022/07/15/zui-jian-dan-de-ti-sheng-wang-zhan-de-xing-neng-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-CDN加速"><a href="#1-CDN加速" class="headerlink" title="1.CDN加速"></a>1.CDN加速</h3><ul><li><p>什么是CDN？</p><p>CDN英文全称content delivery network，翻译过来就是内容分发网络，是一种在地理位置上分散的服务器组，这些服务器组一起工作来加速互联网内容快速传播，这些内容包括HTML页面，css、javascript文件，图像、视频等媒体文件。</p><p>通俗来讲，就是CDN服务公司通过在全球各地建立很多服务器，然后当你加入他们的网络后 ，他们会缓存你的网站内容到各地服务器上，这样当访问你的网站时，他们就会从最近的缓存服务器上读取你的网站，而不需要直接访问你网站所在的服务器地址。</p></li><li><p>为什么强烈建议启用CDN？</p><p>研究表明，如果你的网站打开速度超过2s以上，那么你的客户很有可能离你而去，这一点对于商业化网站尤其重要，打开速度慢，那么将造成不可估量的损失。</p><p>以本博客为例，仓库放在Github上，国内加载速度很慢，因此需要CDN加速来优化网站打开速度。</p></li></ul><h4 id="Cloudflare-CDN"><a href="#Cloudflare-CDN" class="headerlink" title="Cloudflare CDN"></a>Cloudflare CDN</h4><p>Cloudflare是全球最大的一家主营CDN和网络安全的公司，而且配置也非常简单。</p><h5 id="第一步：在Cloudflare添加你的网站"><a href="#第一步：在Cloudflare添加你的网站" class="headerlink" title="第一步：在Cloudflare添加你的网站"></a>第一步：在Cloudflare添加你的网站</h5><p>点击左侧导航栏中的<strong>网站</strong>选项，再点击右上角的<strong>添加站点</strong>按钮，输入你的域名，Cloudflare会开始扫描查询你的网站DNS配置。</p><p><img src="/2022/07/15/zui-jian-dan-de-ti-sheng-wang-zhan-de-xing-neng-de-fang-fa/image-20220715144412879.webp" alt="image-20220715144412879"></p><p>查询DNS完毕之后，会复制你的DNS记录到Cloudflare，然后点击继续按钮；接下来页面会要求你把原来的域名服务器更改为Cloudflare自己的，不改域名服务器，上面的DNS并不会生效。</p><p><img src="/2022/07/15/zui-jian-dan-de-ti-sheng-wang-zhan-de-xing-neng-de-fang-fa/image-20220715144840060.webp" alt="image-20220715144840060"></p><p>以腾讯云为例，登录<strong>腾讯云域名注册管理控制台</strong>，进入“我的域名”页面，选择待修改的DNS域名，点击<strong>管理</strong>选项：</p><p><img src="/2022/07/15/zui-jian-dan-de-ti-sheng-wang-zhan-de-xing-neng-de-fang-fa/image-20220715145234006.webp" alt="image-20220715145234006"></p><p>将DNS服务器修改为Cloudflare提供的两个：</p><p><img src="/2022/07/15/zui-jian-dan-de-ti-sheng-wang-zhan-de-xing-neng-de-fang-fa/image-20220715145503131.webp" alt="image-20220715145503131"></p><p>至此，你的域名就可以在Cloudflare上管理了，在24小时域名服务器更新完成后，用户也可以通过你自己的域名访问到网站了。</p><h5 id="第二步：优化性能"><a href="#第二步：优化性能" class="headerlink" title="第二步：优化性能"></a>第二步：优化性能</h5><p>在Cloudflare进入主页，点击配置好的网站，选择免费套餐，勾选以下设置：</p><ul><li><p>提高安全性</p></li><li><ul><li>自动 HTTPS 重写</li><li>始终使用 HTTPS</li></ul></li><li><p>优化性能</p></li><li><ul><li>Auto Minify， 勾选html、css、js，保存</li><li>Brotli，打开，保存</li></ul></li></ul><p>点击左侧导航栏中的<strong>速度</strong>按钮：</p><ul><li><p>优化</p></li><li><ul><li>Auto Minify 自动最小化 – JavaScript、CSS、HTML 全部勾选，其实这在入门设置的时候就已经勾选了，可以不需要改动</li><li>Brotli – 开启， 同上</li><li>Rocket Loader – 开启，可缩短包含 JavaScript 的页面的绘制时间。</li><li>Railgun – 加入你得主机商在你的主机商安装了此软件，比如<a href="https://link.zhihu.com/?target=https://www.qingsongb2c.com/goto/chemicloud-hosting/">Chemicloud</a>，可以开启，</li><li>AMP（Accelerated Mobile Pages即加速移动端网页的加载速度） 真实 URL – 可开启</li></ul></li><li><p>Browser Insights（现功能在其他地方设置，有操作指导教程，跟着走就行）</p></li><li><ul><li>配置 – Browser Insights开启</li></ul></li></ul><h3 id="2-图片格式与压缩技术："><a href="#2-图片格式与压缩技术：" class="headerlink" title="2.图片格式与压缩技术："></a>2.图片格式与压缩技术：</h3><ol><li><p>将你网站中的文件换为.webp格式，webp是一种同时提供了有损压缩与无损压缩的图片文件格式，派生自图像编码格式VP8 。是由Google购买On2 Technologies后发展出来的格式，以BSD授权条款发布。webp可让网页图档有效进行压缩，同时又不影响图片格式兼容与实际清晰度，进而让整体网页下载速度加快。</p><p>推荐一个转换格式网站：<a href="https://cdkm.com/cn/jpg-to-webp">JPG转WEBP - 免费在线将JPG文件转换成WEBP (cdkm.com)</a></p></li><li><p>无损压缩各类格式图片的网站：<a href="https://tinypng.com/">TinyPNG – Compress WebP, PNG and JPEG images intelligently</a></p></li></ol><p>本文仅介绍了两种最简单的加速个人网站的技巧，还有许多优化技巧，例如压缩字体，URL优化，SEO优化等，以后会更新教程。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用yolo5进行数据训练</title>
      <link href="/2022/07/13/shi-yong-yolo5-jin-xing-shu-ju-xun-lian/"/>
      <url>/2022/07/13/shi-yong-yolo5-jin-xing-shu-ju-xun-lian/</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载数据集并进行本地训练的标准流程"><a href="#1-下载数据集并进行本地训练的标准流程" class="headerlink" title="1.下载数据集并进行本地训练的标准流程"></a>1.下载数据集并进行本地训练的标准流程</h3><ol><li><p>克隆github项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/theAIGuysCode/OIDv4_ToolKit pip <span class="token function">install</span> -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>下载数据集</p><p>数据集网站为<a href="https://storage.googleapis.com/openimages/web/index.html">https://storage.googleapis.com/openimages/web/index.html</a></p><p>搜索对应的类别，这里以Lion为例，下载训练集200张：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python main.py downloader --classes Lion --type_csv train --limit <span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>注意：若某个类别有两个单词组成，单词间使用下划线代替：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python main.py downloader --classes Bell_pepper --type_csv train --limit <span class="token number">400</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意：若想同时训练多个类别，可通过如下代码将多个类别移动至同一类别：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python main.py downloader --classes Aircraft Weapon --type_csv <span class="token builtin class-name">test</span> --limit <span class="token number">100</span> --multiclasses <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>数据预处理</p><p>下载后的数据存储在OID&#x2F;Dataset&#x2F;train&#x2F;，每个类别的文件包括对应的image和label，对应的label为txt文件，打开后为：</p><pre class="line-numbers language-none"><code class="language-none">Lion 48.0 268.23846499999996 972.8 561.4438100000001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>的label为txt文件，打开后为：</p><pre class="line-numbers language-none"><code class="language-none">Lion 48.0 268.23846499999996 972.8 561.4438100000001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但目前的label格式并不能直接拿来放在yolov5中训练，需要转换成yolov5接受的格式</p><ol><li><p>打开classes.txt，将里面的内容改为需要转换的类别：</p><p>在本例中，修改为：Lion</p></li><li><p>运行指令<code>python convert_annotations.py</code>,转换label格式。<br>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">import</span> argparse<span class="token keyword">import</span> fileinput<span class="token comment"># function that turns XMin, YMin, XMax, YMax coordinates to normalized yolo format</span><span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>filename_str<span class="token punctuation">,</span> coords<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>    image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>filename_str <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span>    coords<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-=</span> coords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    coords<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-=</span> coords<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    x_diff <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>coords<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    y_diff <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>coords<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    coords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> coords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>x_diff    coords<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> coords<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>y_diff    coords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    coords<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    coords<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    coords<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"Label"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> coordsROOT_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># create dict to map class names to numbers for yolo</span>classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"classes.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> myFile<span class="token punctuation">:</span>    <span class="token keyword">for</span> num<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>myFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        classes<span class="token punctuation">[</span>line<span class="token punctuation">]</span> <span class="token operator">=</span> num    myFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># step into dataset directory</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"OID"</span><span class="token punctuation">,</span> <span class="token string">"Dataset"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>DIRS <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># for all train, validation and test folders</span><span class="token keyword">for</span> DIR <span class="token keyword">in</span> DIRS<span class="token punctuation">:</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>DIR<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>DIR<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Currently in subdirectory:"</span><span class="token punctuation">,</span> DIR<span class="token punctuation">)</span>                CLASS_DIRS <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># for all class folders step into directory to change annotations</span>        <span class="token keyword">for</span> CLASS_DIR <span class="token keyword">in</span> CLASS_DIRS<span class="token punctuation">:</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>CLASS_DIR<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>CLASS_DIR<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Converting annotations for class: "</span><span class="token punctuation">,</span> CLASS_DIR<span class="token punctuation">)</span>                                <span class="token comment"># Step into Label folder where annotations are generated</span>                os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"Label"</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> filename <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    filename_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> filename<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        annotations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                            <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                                <span class="token keyword">for</span> class_type <span class="token keyword">in</span> classes<span class="token punctuation">:</span>                                    line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>class_type<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>classes<span class="token punctuation">.</span>get<span class="token punctuation">(</span>class_type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                labels <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>                                coords <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                coords <span class="token operator">=</span> convert<span class="token punctuation">(</span>filename_str<span class="token punctuation">,</span> coords<span class="token punctuation">)</span>                                labels<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> coords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> coords<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> coords<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> coords<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>                                newline <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>line<span class="token punctuation">,</span> newline<span class="token punctuation">)</span>                                annotations<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                        os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> outfile<span class="token punctuation">:</span>                            <span class="token keyword">for</span> line <span class="token keyword">in</span> annotations<span class="token punctuation">:</span>                                outfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                                outfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>                            outfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                        os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"Label"</span><span class="token punctuation">)</span>                os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>                os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>移动标签位置</p><p>数据预处理后，txt和jpg文件是放在一个文件夹下的，仍然不是yolov5要求的文件格式，即label，image文件夹分开存放。首先删除Label文件夹中的文件，但不要删除Label文件夹；</p><p>运行代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> glob<span class="token keyword">import</span> shutil<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Pathp <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">r"E:\opencv_learning\OIDv4_ToolKit-master\OID\Dataset\validation\Lion"</span><span class="token punctuation">)</span>  <span class="token comment">#  需要统计的文件夹路径，这里我们统计的是桌面上的test文件夹，可以随便改名</span>q <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">r"E:\opencv_learning\Lion\valid\Label"</span><span class="token punctuation">)</span> <span class="token comment">#  将提取出的所有txt放到test2文件夹下，如果没有需要先创建一个，可以随便改名</span>FileList <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">"**/*.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 找出这个文件夹下的所有txt格式的文件，可以自行换成flac、mp4、mp3，全都可以！</span><span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> FileList<span class="token punctuation">:</span>       <span class="token comment"># 这个的意思是，遍历所有找出的txt文件，并复制到另一个文件夹中</span>    shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时将Lion文件夹下的txt文件复制到Label文件夹下，将Label文件夹重命名为label，复制出来到与yolov5项目同一目录级别的文件夹下；接着同上处理img文件，复制出来放在与label文件夹同一级别的目录中，最终目录格式：</p><p><img src="/2022/07/13/shi-yong-yolo5-jin-xing-shu-ju-xun-lian/image-20220525105312819.webp"></p><ul><li><p>注意：如果使用shutil的move()剪切方法会报错，具体原因据说是shutil的源码bug，目前仍然没有修复，所以只能用这种比较麻烦的方法构成所需目录。</p></li><li><p>注意，要在train同一目录下创建data.yaml文件，内容参考其他data.yaml文件。</p></li><li><p>注意：如果要得到正确的训练结果，还需要下载同类别的validation文件，张数约为训练集的百分之20，用以上方法整理到与train文件夹同一目录下，test文件同理，最终目录结构：</p><p><img src="/2022/07/13/shi-yong-yolo5-jin-xing-shu-ju-xun-lian/image-20220525105701317.webp"></p></li></ul><p>lion_detect是我自己创建放几张网上找的图片用来测试的。</p></li><li><p>开始训练</p><p>打开yolov5 6.1项目，设置训练参数：</p></li></ol><p><img src="/2022/07/13/shi-yong-yolo5-jin-xing-shu-ju-xun-lian/image-20220525105912373.webp"></p><p>​点击train.py文件运行，开始训练，训练完成后打开detect.py文件，设置参数：</p><p><img src="/2022/07/13/shi-yong-yolo5-jin-xing-shu-ju-xun-lian/image-20220525110031198.webp"></p><p>​其中best.pt是训练后最好的权重，用以检测。</p><p><img src="/2022/07/13/shi-yong-yolo5-jin-xing-shu-ju-xun-lian/image-20220525110313235.webp"></p><p>​我们对比一下官方自带的训练集的检测结果：</p><p><img src="/2022/07/13/shi-yong-yolo5-jin-xing-shu-ju-xun-lian/image-20220525110334725.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebGL着色器入门</title>
      <link href="/2022/07/13/webgl-zhao-se-qi-ru-men/"/>
      <url>/2022/07/13/webgl-zhao-se-qi-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="1-着色器是什么？"><a href="#1-着色器是什么？" class="headerlink" title="1.着色器是什么？"></a>1.着色器是什么？</h3><p>WebGL需要两种着色器：<br><strong>顶点着色器(Vertex shader)</strong>:顶点着色器是用来描述顶点特性（如位置、颜色等)的程序。顶点(vertex)是指二维或三维空间中的一个点，比如二维或三维图形的端点或交点。</p><p><strong>片元着色器(Vertex shader)</strong>:进行逐片元处理过程如光照的程序。片元(fragment)是一个WebGL术语，你可以将其理解为像素（图像的单元）。</p><p>下图是浏览器显示图像的流程：</p><p><img src="/2022/07/13/webgl-zhao-se-qi-ru-men/image-20220713214157458.webp"></p><p>图的左侧是两个浏览器窗口。它们是同一个窗口，上面一个是执行JavaScript程序之前的窗口，下面一个是执行之后的。程序执行的流程大概是：首先运行JavaScript程序，调用了WbGL的相关方法，然后顶点着色器和片元着色器就会执行，在颜色缓冲区内进行绘制，这时就清空了绘图区；最后，颜色缓冲区中的内容会自动在浏览器的画布上显示出来。</p><h3 id="2-着色器代码示例："><a href="#2-着色器代码示例：" class="headerlink" title="2.着色器代码示例："></a>2.着色器代码示例：</h3><p>因为着色器程序代码必须预先处理成单个字符串的形式，所以我们用+号将多行字符串连成一个长字符串。每一行以\n结束，这是由于当着色器内部出错时，就能获取出错的行号，这对于检查源代码中的错误很有帮助。但是，\n并不是必须的，你自己编写着色器时，也可以不用它。</p><p><img src="/2022/07/13/webgl-zhao-se-qi-ru-men/image-20220713214259031.webp"></p><h3 id="3-初始化着色器："><a href="#3-初始化着色器：" class="headerlink" title="3.初始化着色器："></a>3.初始化着色器：</h3><p>大部分WebGL程序都遵循这样的流程：</p><p><img src="/2022/07/13/webgl-zhao-se-qi-ru-men/image-20220713214315749.webp"></p><p>目前最重要的是，你必须知道，<strong>WebGL程序包括运行在浏览器中的JavaScript和运行在WebGL系统的着色器程序这两个部分</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebGL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
